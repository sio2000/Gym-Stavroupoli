import{s,z as p}from"./index-BmeQlVRf.js";const k=async()=>{try{console.log("[MembershipAPI] ===== FETCHING MEMBERSHIP PACKAGES =====");const{data:e,error:r}=await s.from("membership_packages").select("*").eq("is_active",!0).order("name");if(console.log("[MembershipAPI] Query result - data:",e,"error:",r),r)throw r;return console.log("[MembershipAPI] Returning packages:",e||[]),e||[]}catch(e){return console.error("[MembershipAPI] ===== ERROR FETCHING MEMBERSHIP PACKAGES ====="),console.error("Error fetching membership packages:",e),p.error("Σφάλμα κατά τη φόρτωση των πακέτων συνδρομής"),[]}},E=async e=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e))return console.error("Invalid package ID format:",e),[];const{data:t,error:a}=await s.from("membership_package_durations").select("*").eq("package_id",e).eq("is_active",!0).order("duration_days");if(a)throw a;return t||[]}catch(r){return console.error("Error fetching package durations:",r),p.error("Σφάλμα κατά τη φόρτωση των επιλογών διάρκειας"),[]}},q=async(e,r,t)=>{try{const{data:{user:a}}=await s.auth.getUser();if(!a)throw new Error("User not authenticated");const{error:i}=await s.from("membership_requests").insert({user_id:a.id,package_id:e,duration_type:r,requested_price:t,status:"pending"});if(i)throw i;return!0}catch(a){return console.error("Error creating membership request:",a),p.error("Σφάλμα κατά τη δημιουργία του αιτήματος"),!1}},I=async()=>{try{const{data:e,error:r}=await s.from("membership_requests").select(`
        *,
        user:user_profiles!membership_requests_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          profile_photo
        ),
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).order("created_at",{ascending:!1});if(r)throw r;return e||[]}catch(e){return console.error("Error fetching membership requests:",e),p.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},M=async e=>{try{const{data:r,error:t}=await s.from("membership_requests").select(`
        *,
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).eq("user_id",e).order("created_at",{ascending:!1});if(t)throw t;return r||[]}catch(r){return console.error("Error fetching user membership requests:",r),p.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},A=async e=>{try{const{data:{user:r}}=await s.auth.getUser();if(!r)throw new Error("User not authenticated");const{data:t,error:a}=await s.from("membership_requests").select("*").eq("id",e).single();if(a||!t)throw new Error("Request not found");const{data:i,error:c}=await s.from("membership_package_durations").select("*").eq("package_id",t.package_id).eq("duration_type",t.duration_type).single();if(c||!i)throw new Error("Duration not found");const l=new Date().toISOString().split("T")[0],m=new Date;m.setDate(m.getDate()+i.duration_days);const h=m.toISOString().split("T")[0],{error:g}=await s.from("membership_requests").update({status:"approved",approved_by:r.id,approved_at:new Date().toISOString()}).eq("id",e);if(g)throw g;const{error:u}=await s.from("memberships").insert({user_id:t.user_id,package_id:t.package_id,start_date:l,end_date:h,is_active:!0,approved_by:r.id,approved_at:new Date().toISOString(),duration_type:t.duration_type});if(u)throw u;const d={pilates_trial:1,pilates_1month:4,pilates_2months:8,pilates_3months:16,pilates_6months:25,pilates_1year:50};let _=!1;try{const{data:o}=await s.from("membership_packages").select("name").eq("id",t.package_id).single();_=(o==null?void 0:o.name)==="Pilates"}catch{console.warn("[MembershipAPI] Could not verify package name for pilates deposit logic. Skipping deposit credit.")}if(_){let o=0;typeof t.classes_count=="number"&&t.classes_count>0&&(o=t.classes_count);try{const{data:n}=await s.from("membership_package_durations").select("classes_count, price, duration_days, duration_type").eq("package_id",t.package_id).eq("duration_type",t.duration_type).single();if(!o&&(n!=null&&n.classes_count)&&(o=n.classes_count),o||(o=d[(n==null?void 0:n.duration_type)||t.duration_type]||0),!o&&typeof(n==null?void 0:n.price)=="number"){const f=Math.round(n.price);o={0:1,44:4,80:8,144:16,190:25,350:50}[f]||0}}catch(n){console.warn("[MembershipAPI] Could not read duration row for pilates deposit mapping:",n)}if(o||(o=d[t.duration_type]||0),o>0){const n=new Date(h+"T23:59:59Z").toISOString(),{error:f}=await s.rpc("credit_pilates_deposit",{p_user_id:t.user_id,p_package_id:t.package_id,p_deposit_remaining:o,p_expires_at:n,p_created_by:r.id});f?console.error("[MembershipAPI] Error creating pilates deposit via RPC:",f):console.log(`[MembershipAPI] Pilates deposit credited via RPC: ${o} lessons for user ${t.user_id}`)}else console.warn("[MembershipAPI] Pilates deposit mapping resulted in 0 credits. Check configuration.")}return!0}catch(r){return console.error("Error approving membership request:",r),p.error("Σφάλμα κατά την έγκριση του αιτήματος"),!1}},U=async(e,r)=>{try{const{data:{user:t}}=await s.auth.getUser();if(!t)throw new Error("User not authenticated");const{error:a}=await s.from("membership_requests").update({status:"rejected",rejected_reason:r}).eq("id",e);if(a)throw a;return!0}catch(t){return console.error("Error rejecting membership request:",t),p.error("Σφάλμα κατά την απόρριψη του αιτήματος"),!1}},D=async e=>{try{console.log("[MembershipAPI] ===== FETCHING USER ACTIVE MEMBERSHIPS ====="),console.log("[MembershipAPI] User ID:",e);const{data:r,error:t}=await s.from("memberships").select(`
        *,
        package:membership_packages(
          id,
          name,
          description,
          package_type
        )
      `).eq("user_id",e).eq("is_active",!0).gte("end_date",new Date().toISOString().split("T")[0]).order("end_date",{ascending:!1});if(console.log("[MembershipAPI] Query result - data:",r,"error:",t),t)throw t;const a=(r||[]).map(i=>({...i,status:i.status||"active",duration_type:i.duration_type||"month",approved_by:i.approved_by||null,approved_at:i.approved_at||i.created_at}));return console.log("[MembershipAPI] Returning active memberships:",a),a}catch(r){return console.error("[MembershipAPI] ===== ERROR FETCHING USER ACTIVE MEMBERSHIPS ====="),console.error("Error fetching user memberships:",r),p.error("Σφάλμα κατά τη φόρτωση των συνδρομών"),[]}},v=async(e,r)=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(r))return console.error("Invalid package ID format:",r),!1;const{data:a,error:i}=await s.from("memberships").select("id").eq("user_id",e).eq("package_id",r).eq("is_active",!0).gte("end_date",new Date().toISOString().split("T")[0]).limit(1);if(i)throw i;return a&&a.length>0}catch(t){return console.error("Error checking active membership:",t),!1}},b=e=>new Intl.NumberFormat("el-GR",{style:"currency",currency:"EUR"}).format(e),P=e=>({year:"Έτος",semester:"Εξάμηνο",month:"Μήνας",lesson:"Μάθημα",pilates_trial:"1 Μάθημα (Trial)",pilates_1month:"4 Μαθήματα (1 μήνας)",pilates_2months:"8 Μαθήματα (2 μήνες)",pilates_3months:"16 Μαθημάτων (3 μήνες)",pilates_6months:"25 Μαθημάτων (6 μήνες)",pilates_1year:"50 Μαθημάτων (1 έτος)",ultimate_1year:"1 Έτος Ultimate"})[e]||e,S=(e,r)=>e==="lesson"&&r===7||e==="pilates_trial"&&r===7?"1 εβδομάδα":r===1?"1 ημέρα":r===7?"1 εβδομάδα":r===30?"1 μήνας":r===365?"1 έτος":`${r} ημέρες`,R=async(e,r)=>{try{console.log("[MembershipAPI] ===== UPDATING PACKAGE DURATION ====="),console.log("[MembershipAPI] Duration ID:",e,"New Price:",r);const{error:t}=await s.from("membership_package_durations").update({price:r,updated_at:new Date().toISOString()}).eq("id",e);if(t)throw console.error("[MembershipAPI] Error updating duration:",t),t;return console.log("[MembershipAPI] Duration updated successfully"),!0}catch(t){return console.error("[MembershipAPI] ===== ERROR UPDATING DURATION ====="),console.error("Error updating package duration:",t),p.error("Σφάλμα κατά την ενημέρωση της τιμής"),!1}},O=async()=>{try{console.log("[MembershipAPI] Loading Pilates package durations from database");const{data:e,error:r}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(r||!e)throw console.error("Error finding Pilates package:",r),new Error("Pilates package not found");const{data:t,error:a}=await s.from("membership_package_durations").select("*").eq("package_id",e.id).eq("is_active",!0).order("price",{ascending:!0});if(a)throw console.error("Error loading Pilates durations:",a),a;return console.log("[MembershipAPI] Loaded Pilates durations:",t),t||[]}catch(e){return console.error("Error loading Pilates package durations:",e),p.error("Σφάλμα κατά τη φόρτωση των επιλογών Pilates"),[]}},T=async(e,r,t,a,i)=>{var c;try{let l=i;if(l)console.log("[MembershipAPI] Using provided userId:",l);else{console.log("[MembershipAPI] Getting user from auth...");const{data:{user:o},error:n}=await s.auth.getUser();if(console.log("[MembershipAPI] Auth result:",{user:o,authError:n}),!o)throw new Error("User not authenticated");l=o.id}console.log("[MembershipAPI] Creating Pilates membership request:",{packageId:e,durationType:r,classesCount:t,requestedPrice:a,userId:l}),console.log("[MembershipAPI] Proceeding with user ID:",l),console.log("[MembershipAPI] Supabase client info:",{hasClient:!!s,hasAuth:!!((c=s)!=null&&c.auth)});let m=e;if(e==="Pilates"||e==="pilates-package"){const{data:o,error:n}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(n||!o)throw console.error("Error finding Pilates package:",n),new Error("Pilates package not found");m=o.id}const h={user_id:l,package_id:m,duration_type:r,requested_price:a,classes_count:t,status:"pending"};console.log("[MembershipAPI] Inserting membership request with data:",h),console.log("[MembershipAPI] Testing table access...");const{data:g,error:u}=await s.from("membership_requests").select("id").limit(1);console.log("[MembershipAPI] Test access result:",{testData:g,testError:u});const{data:d,error:_}=await s.from("membership_requests").insert(h).select().single();if(console.log("[MembershipAPI] Insert result:",{data:d,error:_}),_){if(console.error("[MembershipAPI] Insert error details:",_),_.message&&_.message.includes("Too Many Requests")){console.error("[MembershipAPI] Rate limit exceeded, retrying in 2 seconds..."),await new Promise(f=>setTimeout(f,2e3));const{data:o,error:n}=await s.from("membership_requests").insert(h).select().single();if(n)throw console.error("[MembershipAPI] Retry also failed:",n),n;return console.log("[MembershipAPI] Retry successful:",o),p.success(`Αίτημα Pilates δημιουργήθηκε: ${t} μαθήματα για ${b(a)}`),!0}throw _}return console.log("[MembershipAPI] Pilates request created successfully:",d),p.success(`Αίτημα Pilates δημιουργήθηκε: ${t} μαθήματα για ${b(a)}`),!0}catch(l){return console.error("Error creating Pilates membership request:",l),p.error("Σφάλμα κατά τη δημιουργία του αιτήματος Pilates"),!1}},$=async(e,r)=>{try{console.log(`[MembershipAPI] Updating Pilates pricing: ${e} = ${b(r)}`);const{data:t,error:a}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(a||!t)throw console.error("Error finding Pilates package:",a),new Error("Pilates package not found");const{error:i}=await s.from("membership_package_durations").update({price:r,updated_at:new Date().toISOString()}).eq("package_id",t.id).eq("duration_type",e);if(i)throw console.error("Error updating Pilates pricing:",i),i;return console.log(`[MembershipAPI] Pilates pricing updated successfully: ${e} = ${b(r)}`),p.success(`Η τιμή για ${P(e)} ενημερώθηκε σε ${b(r)}`),!0}catch(t){return console.error("Error updating Pilates pricing:",t),p.error("Σφάλμα κατά την ενημέρωση της τιμής Pilates"),!1}},C=async(e,r,t,a=!1,i)=>{try{let c=i;if(!c){const{data:{user:u},error:d}=await s.auth.getUser();if(!u)throw new Error("User not authenticated");c=u.id}console.log("[MembershipAPI] Creating Ultimate membership request:",{packageId:e,durationType:r,requestedPrice:t,hasInstallments:a,userId:c});let l=e;if(e==="Ultimate"||e==="ultimate-package"){const{data:u,error:d}=await s.from("membership_packages").select("id").eq("name","Ultimate").eq("is_active",!0).single();if(d||!u)throw console.error("Error finding Ultimate package:",d),new Error("Ultimate package not found");l=u.id}const m={user_id:c,package_id:l,duration_type:r,requested_price:t,has_installments:a,status:"pending"};a&&(m.installment_1_amount=0,m.installment_2_amount=0,m.installment_3_amount=0,m.installment_1_payment_method="cash",m.installment_2_payment_method="cash",m.installment_3_payment_method="cash");const{data:h,error:g}=await s.from("membership_requests").insert(m).select().single();if(g)throw console.error("[MembershipAPI] Insert error:",g),g;return console.log("[MembershipAPI] Ultimate request created successfully:",h),a?p.success("Αίτημα Ultimate δημιουργήθηκε με επιλογή δόσεων. Ο διαχειριστής θα καθορίσει τα ποσά."):p.success(`Αίτημα Ultimate δημιουργήθηκε: ${b(t)}`),!0}catch(c){return console.error("Error creating Ultimate membership request:",c),p.error("Σφάλμα κατά τη δημιουργία του αιτήματος Ultimate"),!1}},G=async()=>{try{const{data:e,error:r}=await s.from("membership_package_durations").select(`
        id,
        package_id,
        duration_type,
        duration_days,
        price,
        classes_count,
        is_active,
        created_at,
        updated_at,
        membership_packages!inner(
          id,
          name,
          package_type
        )
      `).eq("membership_packages.name","Ultimate").eq("is_active",!0).order("price",{ascending:!0});if(r)throw console.error("Error fetching Ultimate package durations:",r),r;return e||[]}catch(e){return console.error("Error fetching Ultimate package durations:",e),[]}},N=async e=>{var r;try{console.log("[MembershipAPI] Approving Ultimate membership request with dual activation:",e);const{data:t,error:a}=await s.from("membership_requests").select(`
        *,
        user_profiles!membership_requests_user_id_fkey(user_id, first_name, last_name, email),
        membership_packages!membership_requests_package_id_fkey(id, name, package_type)
      `).eq("id",e).single();if(a||!t)throw console.error("[MembershipAPI] Error fetching request data:",a),a;if(((r=t.membership_packages)==null?void 0:r.name)!=="Ultimate")throw new Error("This function is only for Ultimate package requests");const{error:i}=await s.from("membership_requests").update({status:"approved",updated_at:new Date().toISOString()}).eq("id",e);if(i)throw console.error("[MembershipAPI] Error updating request status:",i),i;const{data:c,error:l}=await s.rpc("create_ultimate_dual_memberships",{p_user_id:t.user_id,p_ultimate_request_id:e,p_duration_days:365,p_start_date:new Date().toISOString().split("T")[0]});if(l)throw console.error("[MembershipAPI] Error creating dual memberships:",l),await s.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),l;if(!c||!c.success)throw console.error("[MembershipAPI] Dual activation failed:",c),await s.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),new Error((c==null?void 0:c.error)||"Failed to create dual memberships");return console.log("[MembershipAPI] Ultimate dual activation successful:",{requestId:e,userId:t.user_id,pilatesMembershipId:c.pilates_membership_id,freeGymMembershipId:c.free_gym_membership_id,startDate:c.start_date,endDate:c.end_date}),!0}catch(t){return console.error("[MembershipAPI] Error approving Ultimate membership request:",t),p.error("Σφάλμα κατά την έγκριση του Ultimate αιτήματος"),!1}};export{A as approveMembershipRequest,N as approveUltimateMembershipRequest,v as checkUserHasActiveMembership,q as createMembershipRequest,T as createPilatesMembershipRequest,C as createUltimateMembershipRequest,b as formatPrice,S as getDurationDisplayText,P as getDurationLabel,E as getMembershipPackageDurations,k as getMembershipPackages,I as getMembershipRequests,O as getPilatesPackageDurations,G as getUltimatePackageDurations,D as getUserActiveMemberships,M as getUserMembershipRequests,U as rejectMembershipRequest,R as updateMembershipPackageDuration,$ as updatePilatesPackagePricing};
