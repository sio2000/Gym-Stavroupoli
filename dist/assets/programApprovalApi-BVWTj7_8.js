import{s as c}from"./index-DAzIvS6A.js";const u=async(e,s,t,a,r="",o)=>{try{console.log("[saveCashTransaction] Saving transaction:",{userId:e,amount:s,transactionType:t,programId:a,createdBy:r,notes:o});const{data:n,error:l}=await c.from("user_cash_transactions").insert({user_id:e,amount:s,transaction_type:t,program_id:a,created_by:r,notes:o}).select().single();return l?(console.error("[saveCashTransaction] Error saving transaction:",l),!1):(console.log("[saveCashTransaction] Transaction saved successfully:",n),!0)}catch(n){return console.error("[saveCashTransaction] Exception saving transaction:",n),!1}},_=async()=>{try{console.log("[getCashRegisterTotals] Fetching totals...");const{data:e,error:s}=await c.from("user_cash_transactions").select("amount, transaction_type");if(s)return console.error("[getCashRegisterTotals] Error fetching totals:",s),{total_cash:0,total_pos:0,total_transactions:0};const t=(e==null?void 0:e.reduce((a,r)=>(r.transaction_type==="cash"?a.total_cash+=r.amount:r.transaction_type==="pos"&&(a.total_pos+=r.amount),a.total_transactions+=1,a),{total_cash:0,total_pos:0,total_transactions:0}))||{total_cash:0,total_pos:0,total_transactions:0};return console.log("[getCashRegisterTotals] Totals calculated:",t),t}catch(e){return console.error("[getCashRegisterTotals] Exception fetching totals:",e),{total_cash:0,total_pos:0,total_transactions:0}}},m=async()=>{try{console.log("[getCashSummaryPerUser] Fetching user summaries...");const{data:e,error:s}=await c.from("user_cash_transactions").select(`
        user_id,
        amount,
        transaction_type,
        created_at,
        user_profiles!user_cash_transactions_user_id_fkey(
          first_name,
          last_name,
          email
        )
      `).order("created_at",{ascending:!1});if(s)return console.error("[getCashSummaryPerUser] Error fetching user summaries:",s),[];if(console.log("[getCashSummaryPerUser] Raw data received:",(e==null?void 0:e.length)||0,"records"),!e||e.length===0)return console.log("[getCashSummaryPerUser] No data found, returning empty array"),[];const t=new Map;e.forEach(r=>{const o=r.user_id,n=r.user_profiles;t.has(o)||t.set(o,{user_id:o,user_name:n?`${n.first_name||""} ${n.last_name||""}`.trim():`User ${o.slice(0,8)}`,user_email:(n==null?void 0:n.email)||"No email",cash_total:0,pos_total:0,cash_count:0,pos_count:0});const l=t.get(o);r.transaction_type==="cash"?(l.cash_total+=r.amount,l.cash_count+=1,(!l.last_cash_date||new Date(r.created_at)>new Date(l.last_cash_date))&&(l.last_cash_date=r.created_at)):r.transaction_type==="pos"&&(l.pos_total+=r.amount,l.pos_count+=1,(!l.last_pos_date||new Date(r.created_at)>new Date(l.last_pos_date))&&(l.last_pos_date=r.created_at))});const a=Array.from(t.values()).sort((r,o)=>o.cash_total+o.pos_total-(r.cash_total+r.pos_total));return console.log("[getCashSummaryPerUser] Processed summaries:",a),a}catch(e){return console.error("[getCashSummaryPerUser] Exception fetching user summaries:",e),[]}},g=async(e,s)=>{try{const{error:t}=await c.from("user_old_members_usage").insert({user_id:e,created_by:s});return t?(console.error("Error marking old members as used:",t),!1):!0}catch(t){return console.error("Exception marking old members as used:",t),!1}},p=async(e,s,t,a)=>{try{if(s<=0)return!0;const{error:r}=await c.from("user_kettlebell_points").insert({user_id:e,points:s,program_id:t,created_by:a});return r?(console.error("Error saving kettlebell points:",r),!1):!0}catch(r){return console.error("Exception saving kettlebell points:",r),!1}},f=async()=>{try{console.log("[getTotalKettlebellPoints] Starting to fetch total points...");const{data:e,error:s}=await c.from("user_kettlebell_points").select("points");if(s)return console.error("[getTotalKettlebellPoints] Error getting total kettlebell points:",s),0;const t=(e==null?void 0:e.reduce((a,r)=>a+r.points,0))||0;return console.log("[getTotalKettlebellPoints] Total points calculated:",t,"from",(e==null?void 0:e.length)||0,"records"),t}catch(e){return console.error("[getTotalKettlebellPoints] Exception getting total kettlebell points:",e),0}},h=async()=>{try{console.log("[getKettlebellPointsSummary] Starting to fetch kettlebell points...");const{data:e,error:s}=await c.from("user_kettlebell_points").select(`
        user_id,
        points,
        created_at,
        user_profiles!user_kettlebell_points_user_id_fkey(
          first_name,
          last_name,
          email
        )
      `).order("created_at",{ascending:!1});if(s)return console.error("[getKettlebellPointsSummary] Error getting kettlebell points summary:",s),[];if(console.log("[getKettlebellPointsSummary] Raw data received:",(e==null?void 0:e.length)||0,"records"),console.log("[getKettlebellPointsSummary] Sample data:",e==null?void 0:e.slice(0,2)),!e||e.length===0)return console.log("[getKettlebellPointsSummary] No data found, returning empty array"),[];const t=new Map;e.forEach(r=>{const o=r.user_id,n=r.user_profiles;t.has(o)||t.set(o,{user_id:o,user_name:n?`${n.first_name||""} ${n.last_name||""}`.trim():`User ${o.slice(0,8)}`,user_email:(n==null?void 0:n.email)||"No email",total_points:0,points_count:0,last_updated:r.created_at});const l=t.get(o);l.total_points+=r.points,l.points_count+=1,new Date(r.created_at)>new Date(l.last_updated)&&(l.last_updated=r.created_at)});const a=Array.from(t.values()).sort((r,o)=>o.total_points-r.total_points);return console.log("[getKettlebellPointsSummary] Processed summary:",a),a}catch(e){return console.error("[getKettlebellPointsSummary] Exception getting kettlebell points summary:",e),[]}},y=async e=>{try{const{data:s,error:t}=await c.from("user_kettlebell_points").select("*").eq("user_id",e).order("created_at",{ascending:!1});return t?(console.error("Error getting user kettlebell points:",t),[]):s||[]}catch(s){return console.error("Exception getting user kettlebell points:",s),[]}},d=async(e,s,t)=>{try{console.log("[saveProgramApprovalState] Saving approval state:",{userId:e,approvalStatus:s,options:t});const{data:a,error:r}=await c.from("program_approval_states").insert({user_id:e,program_id:t.programId,approval_status:s,old_members_used:t.oldMembersUsed||!1,kettlebell_points:t.kettlebellPoints||0,cash_amount:t.cashAmount||0,pos_amount:t.posAmount||0,created_by:t.createdBy,notes:t.notes,group_room_size:t.groupRoomSize,weekly_frequency:t.weeklyFrequency,monthly_total:t.monthlyTotal}).select().single();return r?(console.error("[saveProgramApprovalState] Error saving approval state:",r),!1):(console.log("[saveProgramApprovalState] Approval state saved successfully:",a),!0)}catch(a){return console.error("[saveProgramApprovalState] Exception saving approval state:",a),!1}};export{m as a,f as b,h as c,y as d,p as e,u as f,_ as g,g as m,d as s};
