import{s as F}from"./index-DXc16WYz.js";const R=async(C,I)=>{try{console.log("[GroupTrainingCalendarAPI] Fetching individual personal training sessions...",{startDate:C,endDate:I});const{data:o,error:A}=await F.from("personal_training_schedules").select("id, user_id, training_type, user_type, status").eq("status","accepted");if(console.log("[GroupTrainingCalendarAPI] All accepted schedules:",o),A)return console.error("[GroupTrainingCalendarAPI] Error fetching all schedules:",A),[];const m=o==null?void 0:o.filter(c=>c.training_type==="individual"&&c.user_type==="personal");if(console.log("[GroupTrainingCalendarAPI] Filtered individual personal schedules:",m),m&&m.length>0){const c=m.map(a=>a.id),{data:t,error:T}=await F.from("personal_training_schedules").select(`
          id,
          user_id,
          schedule_data,
          training_type,
          user_type
        `).in("id",c);if(T)return console.error("[GroupTrainingCalendarAPI] Error fetching individual schedules:",T),[];if(console.log("[GroupTrainingCalendarAPI] Found individual schedules:",(t==null?void 0:t.length)||0),console.log("[GroupTrainingCalendarAPI] Individual schedules data:",t),!t||t.length===0)return console.log("[GroupTrainingCalendarAPI] No individual schedules found"),[];const $=[...new Set(t.map(a=>a.user_id))];console.log("[GroupTrainingCalendarAPI] Fetching user profiles for IDs:",$);const{data:_,error:y}=await F.from("user_profiles").select("user_id, first_name, last_name, email").in("user_id",$);if(y)return console.error("[GroupTrainingCalendarAPI] Error fetching user profiles:",y),[];console.log("[GroupTrainingCalendarAPI] Found user profiles:",(_==null?void 0:_.length)||0);const d=new Map;_==null||_.forEach(a=>{d.set(a.user_id,a)});const f=[];return t==null||t.forEach(a=>{if(console.log("[GroupTrainingCalendarAPI] Processing schedule:",a.id,"for user:",a.user_id),console.log("[GroupTrainingCalendarAPI] Schedule data:",a.schedule_data),!a.schedule_data){console.log("[GroupTrainingCalendarAPI] No schedule_data for schedule:",a.id);return}const r=a.schedule_data;let p;if(Array.isArray(r))p=r;else if(r&&typeof r=="object"&&r.sessions)p=r.sessions;else{console.log("[GroupTrainingCalendarAPI] Schedule data is not in expected format for schedule:",a.id,r);return}if(!Array.isArray(p)){console.log("[GroupTrainingCalendarAPI] Sessions is not an array for schedule:",a.id);return}const i=d.get(a.user_id);p.forEach(e=>{const n=e.date;if(n>=C&&n<=I){const h=`${n}T${e.startTime}:00`,[u,P]=e.startTime.split(":").map(Number),q=`${((u+1)%24).toString().padStart(2,"0")}:${P.toString().padStart(2,"0")}`,k=`${n}T${q}:00`;f.push({id:`individual-${a.id}-${e.date}-${e.startTime}`,title:`Personal Training - ${(i==null?void 0:i.first_name)||"Unknown"} ${(i==null?void 0:i.last_name)||"User"}`,type:"group",start:h,end:k,room:e.room||"Personal Training Room",capacity:1,participants_count:1,participants:[{id:a.user_id,name:`${(i==null?void 0:i.first_name)||"Unknown"} ${(i==null?void 0:i.last_name)||"User"}`,email:(i==null?void 0:i.email)||"",avatar_url:void 0}],status:"scheduled",trainer:e.trainer||"Personal Trainer",group_type:1,notes:e.notes||""})}})}),console.log("[GroupTrainingCalendarAPI] Found individual personal training sessions:",f.length),f}else return console.log("[GroupTrainingCalendarAPI] No individual personal schedules found"),[]}catch(o){return console.error("[GroupTrainingCalendarAPI] Error fetching individual personal training sessions:",o),[]}},K=async(C,I)=>{try{console.log("[GroupTrainingCalendarAPI] Fetching calendar events...",{startDate:C,endDate:I});const{data:o,error:A}=await F.from("group_sessions").select(`
        id,
        session_date,
        start_time,
        end_time,
        trainer,
        room,
        group_type,
        notes,
        is_active,
        created_at,
        program_id,
        user_profiles!group_sessions_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        ),
        personal_training_schedules!group_sessions_program_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("is_active",!0).gte("session_date",C).lte("session_date",I).order("session_date",{ascending:!0}).order("start_time",{ascending:!0});if(A)throw console.error("[GroupTrainingCalendarAPI] Error fetching sessions:",A),new Error(`Failed to fetch group sessions: ${A.message}`);console.log("[GroupTrainingCalendarAPI] Raw sessions data:",o);const{data:m,error:c}=await F.from("lesson_bookings").select(`
        id,
        session_id,
        booking_date,
        booking_time,
        trainer_name,
        room,
        status,
        user_id,
        schedule_id,
        user_profiles!lesson_bookings_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        ),
        personal_training_schedules!lesson_bookings_schedule_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("status","booked").gte("booking_date",C).lte("booking_date",I).order("booking_date",{ascending:!0}).order("booking_time",{ascending:!0});c&&console.error("[GroupTrainingCalendarAPI] Error fetching Individual/Paspartu bookings:",c),console.log("[GroupTrainingCalendarAPI] Individual/Paspartu bookings:",m);const t=(o==null?void 0:o.map(r=>r.id))||[],{data:T,error:$}=await F.from("lesson_bookings").select(`
        id,
        session_id,
        status,
        user_id,
        user_profiles!lesson_bookings_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        )
      `).in("session_id",t).eq("status","booked");$&&console.error("[GroupTrainingCalendarAPI] Error fetching bookings:",$);const _=new Map;T==null||T.forEach(r=>{_.has(r.session_id)||_.set(r.session_id,[]),_.get(r.session_id).push(r)});const y=new Map;m==null||m.forEach(r=>{var n,h,u,P;const p=((n=r.personal_training_schedules)==null?void 0:n.training_type)==="individual",i=((h=r.personal_training_schedules)==null?void 0:h.training_type)==="group"&&((u=r.personal_training_schedules)==null?void 0:u.user_type)==="paspartu",e=((P=r.personal_training_schedules)==null?void 0:P.training_type)==="combination";if(p||i||e){const G=`${r.booking_date}-${r.booking_time}-${r.trainer_name}-${r.room}`;y.has(G)||y.set(G,[]),y.get(G).push(r)}});const d=new Map;o==null||o.forEach((r,p)=>{var b,x,z,M,U,D,O,g,B;console.log(`[GroupTrainingCalendarAPI] Processing session ${p+1}:`,{id:r.id,date:r.session_date,time:`${r.start_time}-${r.end_time}`,trainer:r.trainer,room:r.room,group_type:r.group_type,user:(b=r.user_profiles)==null?void 0:b.first_name,training_type:(x=r.personal_training_schedules)==null?void 0:x.training_type,user_type:(z=r.personal_training_schedules)==null?void 0:z.user_type});const i=((M=r.personal_training_schedules)==null?void 0:M.training_type)==="group"&&((U=r.personal_training_schedules)==null?void 0:U.user_type)==="paspartu",e=((D=r.personal_training_schedules)==null?void 0:D.training_type)==="combination",n=e&&r.group_type===null,h=_.get(r.id)||[],u=h.length>0;if(i&&!u&&!n){console.log(`[GroupTrainingCalendarAPI] Skipping Group/Paspartu session ${r.id} - no bookings`);return}e&&console.log(`[GroupTrainingCalendarAPI] Processing Combination session ${r.id} - always displayed`,{group_type:r.group_type,isIndividual:n,user:(O=r.user_profiles)==null?void 0:O.first_name}),n&&console.log(`[GroupTrainingCalendarAPI] Processing Individual session in Combination ${r.id}`,{group_type:r.group_type,user:(g=r.user_profiles)==null?void 0:g.first_name}),n&&console.log(`[GroupTrainingCalendarAPI] FORCING Individual Combination session ${r.id} to be processed`,{group_type:r.group_type,user:(B=r.user_profiles)==null?void 0:B.first_name,willCreateEvent:!0});const P=r.session_date,G=r.start_time,q=r.end_time,k=r.trainer,E=r.room,v=e?`${P}-${G}-${q}-${k}-${E}-${n?"individual":"combination"}-${n?"1":r.group_type||"1"}`:`${P}-${G}-${q}-${k}-${E}-${r.group_type}`;if(console.log(`[GroupTrainingCalendarAPI] Event key: ${v}`,{isGroupPaspartu:i,isCombination:e,hasBookings:u,group_type:r.group_type,willProcess:!i||u}),n&&console.log(`[GroupTrainingCalendarAPI] INDIVIDUAL COMBINATION SESSION DETECTED: ${r.id}`,{eventKey:v,group_type:r.group_type,trainer:k,room:E,date:P,startTime:G,endTime:q,willCreateEvent:!0}),!d.has(v)){let l;n?l=1:l=r.group_type||3;const S=`${P}T${G}:00`,N=`${P}T${q}:00`,w={id:`group-${v}`,title:n?`Ατομική Σεσία - ${k}`:`Group Training - ${k}`,type:"group",start:S,end:N,room:E,capacity:l,participants_count:0,participants:[],status:r.is_active?"scheduled":"cancelled",trainer:k,group_type:n?1:r.group_type,notes:r.notes};d.set(v,w),n&&console.log(`[GroupTrainingCalendarAPI] CREATED EVENT for Individual Combination session: ${r.id}`,{eventKey:v,title:w.title,capacity:w.capacity,start:w.start,end:w.end,trainer:w.trainer,group_type:w.group_type})}const s=d.get(v);r.user_profiles&&!i&&(s.participants.find(S=>S.id===r.user_profiles.user_id)||s.participants.push({id:r.user_profiles.user_id,name:`${r.user_profiles.first_name} ${r.user_profiles.last_name}`,email:r.user_profiles.email,avatar_url:r.user_profiles.avatar_url})),n&&console.log(`[GroupTrainingCalendarAPI] Individual Combination session ${r.id} processed successfully`,{eventKey:v,capacity:s.capacity,participants:s.participants.length,willBeDisplayed:!0,title:s.title,start:s.start,end:s.end}),s.participants_count=s.participants.length,h.forEach(l=>{l.user_profiles&&(s.participants.find(N=>N.id===l.user_profiles.user_id)||s.participants.push({id:l.user_profiles.user_id,name:`${l.user_profiles.first_name} ${l.user_profiles.last_name}`,email:l.user_profiles.email,avatar_url:l.user_profiles.avatar_url}))}),n&&console.log(`[GroupTrainingCalendarAPI] FINAL CHECK: Individual Combination session ${r.id} will be displayed`,{eventKey:v,capacity:s.capacity,participants:s.participants.length,status:s.status,title:s.title,start:s.start,end:s.end,trainer:s.trainer,room:s.room}),s.participants_count=s.participants.length}),y.forEach((r,p)=>{var z,M,U,D,O;console.log(`[GroupTrainingCalendarAPI] Processing Individual/Paspartu bookings for key: ${p}`,{bookingsCount:r.length,firstBooking:r[0]});const i=r[0],e=i.booking_date,n=i.booking_time,h=i.booking_time,u=i.trainer_name,P=i.room,G=((z=i.personal_training_schedules)==null?void 0:z.training_type)==="individual",q=((M=i.personal_training_schedules)==null?void 0:M.training_type)==="group"&&((U=i.personal_training_schedules)==null?void 0:U.user_type)==="paspartu",k=((D=i.personal_training_schedules)==null?void 0:D.training_type)==="combination";let E,v,s,b;if(G)E=1,v=1,s=`Individual Training - ${u}`,b=`${e}-${n}-${h}-${u}-${P}-individual`;else if(q||k){let g=3;const B=o==null?void 0:o.find(l=>{var S,N,w;return l.session_date===e&&l.start_time===n&&l.trainer===u&&l.room===P&&(((S=l.personal_training_schedules)==null?void 0:S.training_type)==="group"&&((N=l.personal_training_schedules)==null?void 0:N.user_type)==="paspartu"||((w=l.personal_training_schedules)==null?void 0:w.training_type)==="combination")});B?(g=B.group_type||3,console.log(`[GroupTrainingCalendarAPI] Found corresponding session for booking, using capacity: ${g}`)):(g=((O=i.personal_training_schedules)==null?void 0:O.group_room_size)||3,console.log(`[GroupTrainingCalendarAPI] No corresponding session found, using group_room_size: ${g}`)),E=g,v=E,s=k?`Ατομική Σεσία - ${u}`:`Group Training - ${u}`,b=`${e}-${n}-${h}-${u}-${P}-${k?"individual":"group-paspartu"}-${v}`}else return;if(console.log(`[GroupTrainingCalendarAPI] Individual/Paspartu event key: ${b}`,{isIndividual:G,isGroupPaspartu:q,capacity:E,groupType:v}),!d.has(b)){const g=`${e}T${n}:00`,B=`${e}T${h}:00`,l={id:`booking-${b}`,title:s,type:"group",start:g,end:B,room:P,capacity:E,participants_count:0,participants:[],status:"scheduled",trainer:u,group_type:v,notes:`${G?"Individual":k?"Combination":"Group/Paspartu"} session - ${r.length} booking(s)`};d.set(b,l)}const x=d.get(b);r.forEach(g=>{g.user_profiles&&(x.participants.find(l=>l.id===g.user_profiles.user_id)||x.participants.push({id:g.user_profiles.user_id,name:`${g.user_profiles.first_name} ${g.user_profiles.last_name}`,email:g.user_profiles.email,avatar_url:g.user_profiles.avatar_url}))})}),d.forEach(r=>{r.participants_count=r.participants.length});const f=Array.from(d.values());console.log("[GroupTrainingCalendarAPI] Final events summary:"),f.forEach((r,p)=>{console.log(`Event ${p+1}:`,{id:r.id,date:r.start.split("T")[0],time:`${r.start.split("T")[1].substring(0,5)}-${r.end.split("T")[1].substring(0,5)}`,trainer:r.trainer,room:r.room,capacity:`${r.participants_count}/${r.capacity}`,group_type:r.group_type})}),console.log("[GroupTrainingCalendarAPI] Processed events:",f.length),console.log("[GroupTrainingCalendarAPI] Fetching individual personal training sessions...");const a=await R(C,I);return f.push(...a),console.log("[GroupTrainingCalendarAPI] Total events including individual sessions:",f.length),{events:f,total_count:f.length}}catch(o){throw console.error("[GroupTrainingCalendarAPI] Unexpected error:",o),new Error("Failed to fetch group training calendar events")}},L=async(C,I,o,A,m,c)=>{var t;try{console.log("[GroupTrainingCalendarAPI] Checking session capacity...",{sessionDate:C,startTime:I,endTime:o,trainer:A,room:m,groupType:c});let T=F.from("group_sessions").select(`
        id,
        group_type,
        personal_training_schedules!group_sessions_program_id_fkey(
          group_room_size
        )
      `).eq("session_date",C).eq("start_time",I).eq("end_time",o).eq("trainer",A).eq("room",m).eq("is_active",!0);c&&(T=T.eq("group_type",c));const{data:$,error:_}=await T;if(_)return console.error("[GroupTrainingCalendarAPI] Error checking capacity:",_),{isFull:!1,currentCount:0,capacity:0,error:_.message};if(!$||$.length===0)return{isFull:!1,currentCount:0,capacity:6};const y=((t=$[0].personal_training_schedules)==null?void 0:t.group_room_size)||6,d=$.map(n=>n.id),{data:f,error:a}=await F.from("lesson_bookings").select("id").in("session_id",d).eq("status","booked");if(a)return console.error("[GroupTrainingCalendarAPI] Error checking bookings:",a),{isFull:!1,currentCount:0,capacity:y,error:a.message};const r=$.length,p=(f==null?void 0:f.length)||0,i=r+p,e=i>=y;return console.log("[GroupTrainingCalendarAPI] Detailed capacity check (SAME GROUP TYPE ONLY):",{groupType:c,sessions:$.length,directUsers:r,bookings:p,total:i,capacity:y,isFull:e}),console.log("[GroupTrainingCalendarAPI] Capacity check result:",{currentCount:i,capacity:y,isFull:e}),{isFull:e,currentCount:i,capacity:y}}catch(T){return console.error("[GroupTrainingCalendarAPI] Error checking capacity:",T),{isFull:!1,currentCount:0,capacity:0,error:"Failed to check capacity"}}},V=async(C,I,o,A,m,c)=>{try{const t=await L(C,I,o,A,m,c);return t.error?{canCreate:!1,error:t.error}:t.isFull?{canCreate:!1,error:`Session is at full capacity (${t.currentCount}/${t.capacity}). Cannot create new session.`,currentCount:t.currentCount,capacity:t.capacity}:{canCreate:!0}}catch(t){return console.error("[GroupTrainingCalendarAPI] Error validating session creation:",t),{canCreate:!1,error:"Failed to validate session creation"}}},Y=async(C,I,o,A,m,c)=>{var t,T,$,_,y;try{console.log("[GroupTrainingCalendarAPI] Validating Individual/Paspartu booking...",{sessionDate:C,startTime:I,trainer:o,room:A,userId:m,scheduleId:c});const{data:d,error:f}=await F.from("lesson_bookings").select(`
        id,
        user_id,
        schedule_id,
        personal_training_schedules!lesson_bookings_schedule_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("booking_date",C).eq("booking_time",I).eq("trainer_name",o).eq("room",A).eq("status","booked");if(f)return console.error("[GroupTrainingCalendarAPI] Error checking existing Individual/Paspartu bookings:",f),{canBook:!1,error:"Failed to check existing bookings"};const a=(d==null?void 0:d.filter(e=>{var n,h,u;return((n=e.personal_training_schedules)==null?void 0:n.training_type)==="individual"||((h=e.personal_training_schedules)==null?void 0:h.user_type)==="paspartu"||((u=e.personal_training_schedules)==null?void 0:u.training_type)==="combination"}))||[];let r=1;if(a.length>0){const e=a[0],n=((t=e.personal_training_schedules)==null?void 0:t.training_type)==="individual",h=((T=e.personal_training_schedules)==null?void 0:T.training_type)==="group"&&(($=e.personal_training_schedules)==null?void 0:$.user_type)==="paspartu",u=((_=e.personal_training_schedules)==null?void 0:_.training_type)==="combination";n?r=1:(h||u)&&(r=((y=e.personal_training_schedules)==null?void 0:y.group_room_size)||3)}else if(c){const{data:e,error:n}=await F.from("personal_training_schedules").select("training_type, user_type, group_room_size").eq("id",c).single();!n&&e&&(e.training_type==="individual"?r=1:(e.training_type==="group"&&e.user_type==="paspartu"||e.training_type==="combination")&&(r=e.group_room_size||3))}const p=a.length,i=p>=r;return console.log("[GroupTrainingCalendarAPI] Individual/Paspartu capacity check:",{currentCount:p,capacity:r,isFull:i,existingBookings:a.length,scheduleId:c}),i?{canBook:!1,error:"This session is already full. Please choose another available time slot.",currentCount:p,capacity:r}:{canBook:!0,currentCount:p,capacity:r}}catch(d){return console.error("[GroupTrainingCalendarAPI] Error validating Individual/Paspartu booking:",d),{canBook:!1,error:"Failed to validate Individual/Paspartu booking"}}};export{L as checkSessionCapacity,K as getGroupTrainingCalendarEvents,Y as validateIndividualPaspartuBooking,V as validateSessionCreation};
