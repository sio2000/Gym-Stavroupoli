import{s as B}from"./index-D1F5Dm1t.js";const R=async($,P)=>{try{console.log("[GroupTrainingCalendarAPI] Fetching calendar events...",{startDate:$,endDate:P});const{data:t,error:I}=await B.from("group_sessions").select(`
        id,
        session_date,
        start_time,
        end_time,
        trainer,
        room,
        group_type,
        notes,
        is_active,
        created_at,
        program_id,
        user_profiles!group_sessions_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        ),
        personal_training_schedules!group_sessions_program_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("is_active",!0).gte("session_date",$).lte("session_date",P).order("session_date",{ascending:!0}).order("start_time",{ascending:!0});if(I)throw console.error("[GroupTrainingCalendarAPI] Error fetching sessions:",I),new Error(`Failed to fetch group sessions: ${I.message}`);console.log("[GroupTrainingCalendarAPI] Raw sessions data:",t);const{data:v,error:f}=await B.from("lesson_bookings").select(`
        id,
        session_id,
        booking_date,
        booking_time,
        trainer_name,
        room,
        status,
        user_id,
        schedule_id,
        user_profiles!lesson_bookings_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        ),
        personal_training_schedules!lesson_bookings_schedule_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("status","booked").gte("booking_date",$).lte("booking_date",P).order("booking_date",{ascending:!0}).order("booking_time",{ascending:!0});f&&console.error("[GroupTrainingCalendarAPI] Error fetching Individual/Paspartu bookings:",f),console.log("[GroupTrainingCalendarAPI] Individual/Paspartu bookings:",v);const _=(t==null?void 0:t.map(r=>r.id))||[],{data:m,error:h}=await B.from("lesson_bookings").select(`
        id,
        session_id,
        status,
        user_id,
        user_profiles!lesson_bookings_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        )
      `).in("session_id",_).eq("status","booked");h&&console.error("[GroupTrainingCalendarAPI] Error fetching bookings:",h);const T=new Map;m==null||m.forEach(r=>{T.has(r.session_id)||T.set(r.session_id,[]),T.get(r.session_id).push(r)});const y=new Map;v==null||v.forEach(r=>{var e,p,l,u;const s=((e=r.personal_training_schedules)==null?void 0:e.training_type)==="individual",i=((p=r.personal_training_schedules)==null?void 0:p.training_type)==="group"&&((l=r.personal_training_schedules)==null?void 0:l.user_type)==="paspartu",o=((u=r.personal_training_schedules)==null?void 0:u.training_type)==="combination";if(s||i||o){const C=`${r.booking_date}-${r.booking_time}-${r.trainer_name}-${r.room}`;y.has(C)||y.set(C,[]),y.get(C).push(r)}});const d=new Map;t==null||t.forEach((r,s)=>{var b,z,N,S,D,M,O,c,w;console.log(`[GroupTrainingCalendarAPI] Processing session ${s+1}:`,{id:r.id,date:r.session_date,time:`${r.start_time}-${r.end_time}`,trainer:r.trainer,room:r.room,group_type:r.group_type,user:(b=r.user_profiles)==null?void 0:b.first_name,training_type:(z=r.personal_training_schedules)==null?void 0:z.training_type,user_type:(N=r.personal_training_schedules)==null?void 0:N.user_type});const i=((S=r.personal_training_schedules)==null?void 0:S.training_type)==="group"&&((D=r.personal_training_schedules)==null?void 0:D.user_type)==="paspartu",o=((M=r.personal_training_schedules)==null?void 0:M.training_type)==="combination",e=o&&r.group_type===null,p=T.get(r.id)||[],l=p.length>0;if(i&&!l&&!e){console.log(`[GroupTrainingCalendarAPI] Skipping Group/Paspartu session ${r.id} - no bookings`);return}o&&console.log(`[GroupTrainingCalendarAPI] Processing Combination session ${r.id} - always displayed`,{group_type:r.group_type,isIndividual:e,user:(O=r.user_profiles)==null?void 0:O.first_name}),e&&console.log(`[GroupTrainingCalendarAPI] Processing Individual session in Combination ${r.id}`,{group_type:r.group_type,user:(c=r.user_profiles)==null?void 0:c.first_name}),e&&console.log(`[GroupTrainingCalendarAPI] FORCING Individual Combination session ${r.id} to be processed`,{group_type:r.group_type,user:(w=r.user_profiles)==null?void 0:w.first_name,willCreateEvent:!0});const u=r.session_date,C=r.start_time,F=r.end_time,G=r.trainer,E=r.room,g=o?`${u}-${C}-${F}-${G}-${E}-${e?"individual":"combination"}-${e?"1":r.group_type||"1"}`:`${u}-${C}-${F}-${G}-${E}-${r.group_type}`;if(console.log(`[GroupTrainingCalendarAPI] Event key: ${g}`,{isGroupPaspartu:i,isCombination:o,hasBookings:l,group_type:r.group_type,willProcess:!i||l}),e&&console.log(`[GroupTrainingCalendarAPI] INDIVIDUAL COMBINATION SESSION DETECTED: ${r.id}`,{eventKey:g,group_type:r.group_type,trainer:G,room:E,date:u,startTime:C,endTime:F,willCreateEvent:!0}),!d.has(g)){let n;e?n=1:n=r.group_type||3;const q=`${u}T${C}:00`,x=`${u}T${F}:00`,A={id:`group-${g}`,title:e?`Ατομική Σεσία - ${G}`:`Group Training - ${G}`,type:"group",start:q,end:x,room:E,capacity:n,participants_count:0,participants:[],status:r.is_active?"scheduled":"cancelled",trainer:G,group_type:e?1:r.group_type,notes:r.notes};d.set(g,A),e&&console.log(`[GroupTrainingCalendarAPI] CREATED EVENT for Individual Combination session: ${r.id}`,{eventKey:g,title:A.title,capacity:A.capacity,start:A.start,end:A.end,trainer:A.trainer,group_type:A.group_type})}const a=d.get(g);r.user_profiles&&!i&&(a.participants.find(q=>q.id===r.user_profiles.user_id)||a.participants.push({id:r.user_profiles.user_id,name:`${r.user_profiles.first_name} ${r.user_profiles.last_name}`,email:r.user_profiles.email,avatar_url:r.user_profiles.avatar_url})),e&&console.log(`[GroupTrainingCalendarAPI] Individual Combination session ${r.id} processed successfully`,{eventKey:g,capacity:a.capacity,participants:a.participants.length,willBeDisplayed:!0,title:a.title,start:a.start,end:a.end}),a.participants_count=a.participants.length,p.forEach(n=>{n.user_profiles&&(a.participants.find(x=>x.id===n.user_profiles.user_id)||a.participants.push({id:n.user_profiles.user_id,name:`${n.user_profiles.first_name} ${n.user_profiles.last_name}`,email:n.user_profiles.email,avatar_url:n.user_profiles.avatar_url}))}),e&&console.log(`[GroupTrainingCalendarAPI] FINAL CHECK: Individual Combination session ${r.id} will be displayed`,{eventKey:g,capacity:a.capacity,participants:a.participants.length,status:a.status,title:a.title,start:a.start,end:a.end,trainer:a.trainer,room:a.room}),a.participants_count=a.participants.length}),y.forEach((r,s)=>{var N,S,D,M,O;console.log(`[GroupTrainingCalendarAPI] Processing Individual/Paspartu bookings for key: ${s}`,{bookingsCount:r.length,firstBooking:r[0]});const i=r[0],o=i.booking_date,e=i.booking_time,p=i.booking_time,l=i.trainer_name,u=i.room,C=((N=i.personal_training_schedules)==null?void 0:N.training_type)==="individual",F=((S=i.personal_training_schedules)==null?void 0:S.training_type)==="group"&&((D=i.personal_training_schedules)==null?void 0:D.user_type)==="paspartu",G=((M=i.personal_training_schedules)==null?void 0:M.training_type)==="combination";let E,g,a,b;if(C)E=1,g=1,a=`Individual Training - ${l}`,b=`${o}-${e}-${p}-${l}-${u}-individual`;else if(F||G){let c=3;const w=t==null?void 0:t.find(n=>{var q,x,A;return n.session_date===o&&n.start_time===e&&n.trainer===l&&n.room===u&&(((q=n.personal_training_schedules)==null?void 0:q.training_type)==="group"&&((x=n.personal_training_schedules)==null?void 0:x.user_type)==="paspartu"||((A=n.personal_training_schedules)==null?void 0:A.training_type)==="combination")});w?(c=w.group_type||3,console.log(`[GroupTrainingCalendarAPI] Found corresponding session for booking, using capacity: ${c}`)):(c=((O=i.personal_training_schedules)==null?void 0:O.group_room_size)||3,console.log(`[GroupTrainingCalendarAPI] No corresponding session found, using group_room_size: ${c}`)),E=c,g=E,a=G?`Ατομική Σεσία - ${l}`:`Group Training - ${l}`,b=`${o}-${e}-${p}-${l}-${u}-${G?"individual":"group-paspartu"}-${g}`}else return;if(console.log(`[GroupTrainingCalendarAPI] Individual/Paspartu event key: ${b}`,{isIndividual:C,isGroupPaspartu:F,capacity:E,groupType:g}),!d.has(b)){const c=`${o}T${e}:00`,w=`${o}T${p}:00`,n={id:`booking-${b}`,title:a,type:"group",start:c,end:w,room:u,capacity:E,participants_count:0,participants:[],status:"scheduled",trainer:l,group_type:g,notes:`${C?"Individual":G?"Combination":"Group/Paspartu"} session - ${r.length} booking(s)`};d.set(b,n)}const z=d.get(b);r.forEach(c=>{c.user_profiles&&(z.participants.find(n=>n.id===c.user_profiles.user_id)||z.participants.push({id:c.user_profiles.user_id,name:`${c.user_profiles.first_name} ${c.user_profiles.last_name}`,email:c.user_profiles.email,avatar_url:c.user_profiles.avatar_url}))})}),d.forEach(r=>{r.participants_count=r.participants.length});const k=Array.from(d.values());return console.log("[GroupTrainingCalendarAPI] Final events summary:"),k.forEach((r,s)=>{console.log(`Event ${s+1}:`,{id:r.id,date:r.start.split("T")[0],time:`${r.start.split("T")[1].substring(0,5)}-${r.end.split("T")[1].substring(0,5)}`,trainer:r.trainer,room:r.room,capacity:`${r.participants_count}/${r.capacity}`,group_type:r.group_type})}),console.log("[GroupTrainingCalendarAPI] Processed events:",k.length),{events:k,total_count:k.length}}catch(t){throw console.error("[GroupTrainingCalendarAPI] Unexpected error:",t),new Error("Failed to fetch group training calendar events")}},U=async($,P,t,I,v,f)=>{var _;try{console.log("[GroupTrainingCalendarAPI] Checking session capacity...",{sessionDate:$,startTime:P,endTime:t,trainer:I,room:v,groupType:f});let m=B.from("group_sessions").select(`
        id,
        group_type,
        personal_training_schedules!group_sessions_program_id_fkey(
          group_room_size
        )
      `).eq("session_date",$).eq("start_time",P).eq("end_time",t).eq("trainer",I).eq("room",v).eq("is_active",!0);f&&(m=m.eq("group_type",f));const{data:h,error:T}=await m;if(T)return console.error("[GroupTrainingCalendarAPI] Error checking capacity:",T),{isFull:!1,currentCount:0,capacity:0,error:T.message};if(!h||h.length===0)return{isFull:!1,currentCount:0,capacity:6};const y=((_=h[0].personal_training_schedules)==null?void 0:_.group_room_size)||6,d=h.map(p=>p.id),{data:k,error:r}=await B.from("lesson_bookings").select("id").in("session_id",d).eq("status","booked");if(r)return console.error("[GroupTrainingCalendarAPI] Error checking bookings:",r),{isFull:!1,currentCount:0,capacity:y,error:r.message};const s=h.length,i=(k==null?void 0:k.length)||0,o=s+i,e=o>=y;return console.log("[GroupTrainingCalendarAPI] Detailed capacity check (SAME GROUP TYPE ONLY):",{groupType:f,sessions:h.length,directUsers:s,bookings:i,total:o,capacity:y,isFull:e}),console.log("[GroupTrainingCalendarAPI] Capacity check result:",{currentCount:o,capacity:y,isFull:e}),{isFull:e,currentCount:o,capacity:y}}catch(m){return console.error("[GroupTrainingCalendarAPI] Error checking capacity:",m),{isFull:!1,currentCount:0,capacity:0,error:"Failed to check capacity"}}},K=async($,P,t,I,v,f)=>{try{const _=await U($,P,t,I,v,f);return _.error?{canCreate:!1,error:_.error}:_.isFull?{canCreate:!1,error:`Session is at full capacity (${_.currentCount}/${_.capacity}). Cannot create new session.`,currentCount:_.currentCount,capacity:_.capacity}:{canCreate:!0}}catch(_){return console.error("[GroupTrainingCalendarAPI] Error validating session creation:",_),{canCreate:!1,error:"Failed to validate session creation"}}},V=async($,P,t,I,v,f)=>{var _,m,h,T,y;try{console.log("[GroupTrainingCalendarAPI] Validating Individual/Paspartu booking...",{sessionDate:$,startTime:P,trainer:t,room:I,userId:v,scheduleId:f});const{data:d,error:k}=await B.from("lesson_bookings").select(`
        id,
        user_id,
        schedule_id,
        personal_training_schedules!lesson_bookings_schedule_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("booking_date",$).eq("booking_time",P).eq("trainer_name",t).eq("room",I).eq("status","booked");if(k)return console.error("[GroupTrainingCalendarAPI] Error checking existing Individual/Paspartu bookings:",k),{canBook:!1,error:"Failed to check existing bookings"};const r=(d==null?void 0:d.filter(e=>{var p,l,u;return((p=e.personal_training_schedules)==null?void 0:p.training_type)==="individual"||((l=e.personal_training_schedules)==null?void 0:l.user_type)==="paspartu"||((u=e.personal_training_schedules)==null?void 0:u.training_type)==="combination"}))||[];let s=1;if(r.length>0){const e=r[0],p=((_=e.personal_training_schedules)==null?void 0:_.training_type)==="individual",l=((m=e.personal_training_schedules)==null?void 0:m.training_type)==="group"&&((h=e.personal_training_schedules)==null?void 0:h.user_type)==="paspartu",u=((T=e.personal_training_schedules)==null?void 0:T.training_type)==="combination";p?s=1:(l||u)&&(s=((y=e.personal_training_schedules)==null?void 0:y.group_room_size)||3)}else if(f){const{data:e,error:p}=await B.from("personal_training_schedules").select("training_type, user_type, group_room_size").eq("id",f).single();!p&&e&&(e.training_type==="individual"?s=1:(e.training_type==="group"&&e.user_type==="paspartu"||e.training_type==="combination")&&(s=e.group_room_size||3))}const i=r.length,o=i>=s;return console.log("[GroupTrainingCalendarAPI] Individual/Paspartu capacity check:",{currentCount:i,capacity:s,isFull:o,existingBookings:r.length,scheduleId:f}),o?{canBook:!1,error:"This session is already full. Please choose another available time slot.",currentCount:i,capacity:s}:{canBook:!0,currentCount:i,capacity:s}}catch(d){return console.error("[GroupTrainingCalendarAPI] Error validating Individual/Paspartu booking:",d),{canBook:!1,error:"Failed to validate Individual/Paspartu booking"}}};export{U as checkSessionCapacity,R as getGroupTrainingCalendarEvents,V as validateIndividualPaspartuBooking,K as validateSessionCreation};
