import{s as a}from"./index-D1F5Dm1t.js";const _=async()=>{const{data:o,error:t}=await a.from("pilates_schedule_slots").select("*").order("date",{ascending:!0}).order("start_time",{ascending:!0});if(t)throw console.error("Error fetching pilates schedule slots:",t),t;return o||[]},g=async(o,t)=>{try{console.log("Fetching available pilates slots...");const e=new Date().toISOString().split("T")[0],r=o||e,n=t||new Date(new Date(r).getTime()+13*24*60*60*1e3).toISOString().split("T")[0],{data:s,error:l}=await a.from("pilates_slots_with_occupancy").select("*").eq("is_active",!0).gte("date",r).lte("date",n).order("date",{ascending:!0}).order("start_time",{ascending:!0});if(l)throw console.error("Error fetching available pilates slots:",l),l;console.log("Fetched slots from DB:",(s==null?void 0:s.length)||0),console.log("Sample slots from DB:",s==null?void 0:s.slice(0,5));const c=(s||[]).map(i=>({id:i.slot_id,date:i.date,start_time:i.start_time,end_time:i.end_time,max_capacity:i.max_capacity,available_capacity:Math.max(0,(i.max_capacity||0)-(i.booked_count||0)),status:"available",is_active:i.is_active,booked_count:i.booked_count||0}));return console.log("Transformed slots:",c.length),console.log("Sample transformed slots:",c.slice(0,5)),c}catch(e){throw console.error("Error fetching available pilates slots:",e),e}},p=async o=>{const{data:t,error:e}=await a.from("pilates_deposits").select("deposit_remaining, is_active").eq("user_id",o).eq("is_active",!0).order("credited_at",{ascending:!1}).limit(1);return e?(console.error("Error fetching active pilates deposit:",e),null):t&&t.length>0?t[0]:null},u=o=>a.channel("realtime:pila").on("postgres_changes",{event:"*",schema:"public",table:"pilates_bookings"},o).on("postgres_changes",{event:"*",schema:"public",table:"pilates_schedule_slots"},o).subscribe(),f=async o=>{let t=a.from("pilates_bookings").select(`
      *,
      slot:pilates_schedule_slots(*),
      user:user_profiles(*)
    `).order("booking_date",{ascending:!1});o&&(t=t.eq("user_id",o));const{data:e,error:r}=await t;if(r)throw console.error("Error fetching pilates bookings:",r),r;return e||[]},h=async(o,t)=>{var c;const{data:e,error:r}=await a.rpc("book_pilates_class",{p_user_id:t,p_slot_id:o.slotId});if(r)throw console.error("Error booking pilates via RPC:",r),r;const n=((c=e==null?void 0:e[0])==null?void 0:c.booking_id)||(e==null?void 0:e.booking_id);if(!n)throw new Error("Booking failed: missing booking id");const{data:s,error:l}=await a.from("pilates_bookings").select(`
      *,
      slot:pilates_schedule_slots(*),
      user:user_profiles(*)
    `).eq("id",n).single();if(l)throw console.error("Error fetching created booking:",l),l;return s},b=async(o,t)=>{if(!t){const{data:{user:s}}=await a.auth.getUser();t=s==null?void 0:s.id}const{error:e}=await a.rpc("cancel_pilates_booking",{p_booking_id:o,p_user_id:t});if(e)throw console.error("Error cancelling pilates via RPC:",e),e;const{data:r,error:n}=await a.from("pilates_bookings").select(`
      *,
      slot:pilates_schedule_slots(*),
      user:user_profiles(*)
    `).eq("id",o).single();if(n)throw console.error("Error fetching cancelled booking:",n),n;return r},m=async o=>{const{data:t,error:e}=await a.from("pilates_bookings").select(`
      *,
      user:user_profiles(first_name, last_name, email)
    `).eq("slot_id",o).eq("status","confirmed").order("booking_date",{ascending:!0});if(e)throw console.error("Error fetching pilates slot bookings:",e),e;return t||[]};export{g as a,m as b,f as c,p as d,h as e,b as f,_ as g,u as s};
