import{s,z as d}from"./index-DXc16WYz.js";const y=async()=>{try{console.log("[MembershipAPI] ===== FETCHING MEMBERSHIP PACKAGES =====");const{data:e,error:t}=await s.from("membership_packages").select("*").eq("is_active",!0).order("name");if(console.log("[MembershipAPI] Query result - data:",e,"error:",t),t)throw t;return console.log("[MembershipAPI] Returning packages:",e||[]),e||[]}catch(e){return console.error("[MembershipAPI] ===== ERROR FETCHING MEMBERSHIP PACKAGES ====="),console.error("Error fetching membership packages:",e),d.error("Σφάλμα κατά τη φόρτωση των πακέτων συνδρομής"),[]}},I=async e=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e))return console.error("Invalid package ID format:",e),[];const{data:r,error:a}=await s.from("membership_package_durations").select("*").eq("package_id",e).eq("is_active",!0).order("duration_days");if(a)throw a;return r||[]}catch(t){return console.error("Error fetching package durations:",t),d.error("Σφάλμα κατά τη φόρτωση των επιλογών διάρκειας"),[]}},E=async(e,t,r,a=!1)=>{try{const{data:{user:o}}=await s.auth.getUser();if(!o)throw new Error("User not authenticated");const i={user_id:o.id,package_id:e,duration_type:t,requested_price:r,status:"pending"};a&&(i.has_installments=!0,i.installment_1_amount=0,i.installment_2_amount=0,i.installment_3_amount=0,i.installment_1_payment_method="cash",i.installment_2_payment_method="cash",i.installment_3_payment_method="cash");const{error:p}=await s.from("membership_requests").insert(i);if(p)throw p;return!0}catch(o){return console.error("Error creating membership request:",o),d.error("Σφάλμα κατά τη δημιουργία του αιτήματος"),!1}},M=async()=>{try{const{data:e,error:t}=await s.from("membership_requests").select(`
        *,
        user:user_profiles!membership_requests_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          profile_photo
        ),
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).not("package.name","eq","Ultimate").order("created_at",{ascending:!1});if(t)throw t;return console.log("[MembershipAPI] Processing requests with locked installments..."),await Promise.all((e||[]).map(async a=>{try{if(a.installment_1_locked!==void 0||a.installment_2_locked!==void 0||a.installment_3_locked!==void 0)return console.log(`[MembershipAPI] Request ${a.id} - Using new fields`),{...a,installment_1_locked:a.installment_1_locked||!1,installment_2_locked:a.installment_2_locked||!1,installment_3_locked:a.installment_3_locked||!1,third_installment_deleted:a.third_installment_deleted||!1,third_installment_deleted_at:a.third_installment_deleted_at,third_installment_deleted_by:a.third_installment_deleted_by};console.log(`[MembershipAPI] Request ${a.id} - Using old system (fields not found)`);const{data:i,error:p}=await s.rpc("get_locked_installments_for_request",{request_id:a.id});if(p)return console.error("Error loading locked installments for request:",a.id,p),a;const l=i||[],{data:h,error:m}=await s.rpc("is_third_installment_deleted",{request_id:a.id});let _=!1,g,f;if(!m&&h&&(_=h,h)){const{data:n,error:c}=await s.rpc("get_deleted_third_installment_info",{request_id:a.id});!c&&n&&n.length>0&&(g=n[0].deleted_at,f=n[0].deleted_by_name)}return{...a,locked_installments:l,installment_1_locked:l.some(n=>n.installment_number===1),installment_2_locked:l.some(n=>n.installment_number===2),installment_3_locked:l.some(n=>n.installment_number===3),third_installment_deleted:_,third_installment_deleted_at:g,third_installment_deleted_by:f}}catch(o){return console.error("Error processing locked installments for request:",a.id,o),a}}))}catch(e){return console.error("Error fetching membership requests with locked installments:",e),d.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},q=async e=>{try{const{data:t,error:r}=await s.from("membership_requests").select(`
        *,
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).eq("user_id",e).not("package.name","eq","Ultimate").order("created_at",{ascending:!1});if(r)throw r;return t||[]}catch(t){return console.error("Error fetching user membership requests:",t),d.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},A=async e=>{try{const{data:{user:t}}=await s.auth.getUser();if(!t)throw new Error("User not authenticated");const{data:r,error:a}=await s.from("membership_requests").select("*").eq("id",e).single();if(a||!r)throw new Error("Request not found");const{data:o,error:i}=await s.from("membership_package_durations").select("*").eq("package_id",r.package_id).eq("duration_type",r.duration_type).single();if(i||!o)throw new Error("Duration not found");const p=`${new Date().getFullYear()}-${String(new Date().getMonth()+1).padStart(2,"0")}-${String(new Date().getDate()).padStart(2,"0")}`,l=new Date;l.setDate(l.getDate()+o.duration_days);const h=`${l.getFullYear()}-${String(l.getMonth()+1).padStart(2,"0")}-${String(l.getDate()).padStart(2,"0")}`,{error:m}=await s.from("membership_requests").update({status:"approved",approved_by:t.id,approved_at:new Date().toISOString()}).eq("id",e);if(m)throw m;const{error:_}=await s.from("memberships").insert({user_id:r.user_id,package_id:r.package_id,start_date:p,end_date:h,is_active:!0,approved_by:t.id,approved_at:new Date().toISOString(),duration_type:r.duration_type});if(_)throw _;const g={pilates_trial:1,pilates_1month:4,pilates_2months:8,pilates_3months:16,pilates_6months:25,pilates_1year:50};let f=!1;try{const{data:n}=await s.from("membership_packages").select("name").eq("id",r.package_id).single();f=(n==null?void 0:n.name)==="Pilates"}catch{console.warn("[MembershipAPI] Could not verify package name for pilates deposit logic. Skipping deposit credit.")}if(f){let n=0;typeof r.classes_count=="number"&&r.classes_count>0&&(n=r.classes_count);try{const{data:c}=await s.from("membership_package_durations").select("classes_count, price, duration_days, duration_type").eq("package_id",r.package_id).eq("duration_type",r.duration_type).single();if(!n&&(c!=null&&c.classes_count)&&(n=c.classes_count),n||(n=g[(c==null?void 0:c.duration_type)||r.duration_type]||0),!n&&typeof(c==null?void 0:c.price)=="number"){const u=Math.round(c.price);n={0:1,44:4,80:8,144:16,190:25,350:50}[u]||0}}catch(c){console.warn("[MembershipAPI] Could not read duration row for pilates deposit mapping:",c)}if(n||(n=g[r.duration_type]||0),n>0){const c=new Date(h+"T23:59:59Z").toISOString(),{error:u}=await s.rpc("credit_pilates_deposit",{p_user_id:r.user_id,p_package_id:r.package_id,p_deposit_remaining:n,p_expires_at:c,p_created_by:t.id});u?console.error("[MembershipAPI] Error creating pilates deposit via RPC:",u):console.log(`[MembershipAPI] Pilates deposit credited via RPC: ${n} lessons for user ${r.user_id}`)}else console.warn("[MembershipAPI] Pilates deposit mapping resulted in 0 credits. Check configuration.")}return!0}catch(t){return console.error("Error approving membership request:",t),d.error("Σφάλμα κατά την έγκριση του αιτήματος"),!1}},U=async(e,t)=>{try{const{data:{user:r}}=await s.auth.getUser();if(!r)throw new Error("User not authenticated");const{error:a}=await s.from("membership_requests").update({status:"rejected",rejected_reason:t}).eq("id",e);if(a)throw a;return!0}catch(r){return console.error("Error rejecting membership request:",r),d.error("Σφάλμα κατά την απόρριψη του αιτήματος"),!1}},D=async e=>{try{console.log("[MembershipAPI] ===== FETCHING USER ACTIVE MEMBERSHIPS ====="),console.log("[MembershipAPI] User ID:",e);const{data:t,error:r}=await s.from("memberships").select(`
        *,
        package:membership_packages(
          id,
          name,
          description,
          package_type
        )
      `).eq("user_id",e).eq("is_active",!0).gte("end_date",new Date().toISOString().split("T")[0]).order("end_date",{ascending:!1});if(console.log("[MembershipAPI] Query result - data:",t,"error:",r),r)throw r;const a=(t||[]).map(o=>({...o,status:o.status||"active",duration_type:o.duration_type||"month",approved_by:o.approved_by||null,approved_at:o.approved_at||o.created_at}));return console.log("[MembershipAPI] Returning active memberships:",a),a}catch(t){return console.error("[MembershipAPI] ===== ERROR FETCHING USER ACTIVE MEMBERSHIPS ====="),console.error("Error fetching user memberships:",t),d.error("Σφάλμα κατά τη φόρτωση των συνδρομών"),[]}},v=async(e,t)=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t))return console.error("Invalid package ID format:",t),!1;const{data:a,error:o}=await s.from("memberships").select("id").eq("user_id",e).eq("package_id",t).eq("is_active",!0).gte("end_date",new Date().toISOString().split("T")[0]).limit(1);if(o)throw o;return a&&a.length>0}catch(r){return console.error("Error checking active membership:",r),!1}},b=e=>new Intl.NumberFormat("el-GR",{style:"currency",currency:"EUR"}).format(e),w=e=>({year:"Έτος",semester:"Εξάμηνο",month:"Μήνας",lesson:"Μάθημα",pilates_trial:"1 Μάθημα (Trial)",pilates_1month:"4 Μαθήματα (1 μήνας)",pilates_2months:"8 Μαθήματα (2 μήνες)",pilates_3months:"16 Μαθημάτων (3 μήνες)",pilates_6months:"25 Μαθημάτων (6 μήνες)",pilates_1year:"50 Μαθημάτων (1 έτος)",ultimate_1year:"1 Έτος Ultimate"})[e]||e,S=(e,t)=>e==="lesson"&&t===7||e==="pilates_trial"&&t===7?"1 εβδομάδα":e==="3 Μήνες"&&t===90?"Τρίμηνο":t===1?"1 ημέρα":t===7?"1 εβδομάδα":t===30?"1 μήνας":t===90?"3 μήνες":t===180?"6 μήνες":t===365?"1 έτος":`${t} ημέρες`,R=async(e,t)=>{try{console.log("[MembershipAPI] ===== UPDATING PACKAGE DURATION ====="),console.log("[MembershipAPI] Duration ID:",e,"New Price:",t);const{error:r}=await s.from("membership_package_durations").update({price:t,updated_at:new Date().toISOString()}).eq("id",e);if(r)throw console.error("[MembershipAPI] Error updating duration:",r),r;return console.log("[MembershipAPI] Duration updated successfully"),!0}catch(r){return console.error("[MembershipAPI] ===== ERROR UPDATING DURATION ====="),console.error("Error updating package duration:",r),d.error("Σφάλμα κατά την ενημέρωση της τιμής"),!1}},$=async()=>{try{console.log("[MembershipAPI] Loading Pilates package durations from database");const{data:e,error:t}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(t||!e)throw console.error("Error finding Pilates package:",t),new Error("Pilates package not found");const{data:r,error:a}=await s.from("membership_package_durations").select("*").eq("package_id",e.id).eq("is_active",!0).order("price",{ascending:!0});if(a)throw console.error("Error loading Pilates durations:",a),a;return console.log("[MembershipAPI] Loaded Pilates durations:",r),r||[]}catch(e){return console.error("Error loading Pilates package durations:",e),d.error("Σφάλμα κατά τη φόρτωση των επιλογών Pilates"),[]}},O=async(e,t,r,a,o,i=!1)=>{var p;try{let l=o;if(l)console.log("[MembershipAPI] Using provided userId:",l);else{console.log("[MembershipAPI] Getting user from auth...");const{data:{user:c},error:u}=await s.auth.getUser();if(console.log("[MembershipAPI] Auth result:",{user:c,authError:u}),!c)throw new Error("User not authenticated");l=c.id}console.log("[MembershipAPI] Creating Pilates membership request:",{packageId:e,durationType:t,classesCount:r,requestedPrice:a,userId:l}),console.log("[MembershipAPI] Proceeding with user ID:",l),console.log("[MembershipAPI] Supabase client info:",{hasClient:!!s,hasAuth:!!((p=s)!=null&&p.auth)});let h=e;if(e==="Pilates"||e==="pilates-package"){const{data:c,error:u}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(u||!c)throw console.error("Error finding Pilates package:",u),new Error("Pilates package not found");h=c.id}const m={user_id:l,package_id:h,duration_type:t,requested_price:a,classes_count:r,status:"pending"};i&&(m.has_installments=!0,m.installment_1_amount=0,m.installment_2_amount=0,m.installment_3_amount=0,m.installment_1_payment_method="cash",m.installment_2_payment_method="cash",m.installment_3_payment_method="cash"),console.log("[MembershipAPI] Inserting membership request with data:",m),console.log("[MembershipAPI] Testing table access...");const{data:_,error:g}=await s.from("membership_requests").select("id").limit(1);console.log("[MembershipAPI] Test access result:",{testData:_,testError:g});const{data:f,error:n}=await s.from("membership_requests").insert(m).select().single();if(console.log("[MembershipAPI] Insert result:",{data:f,error:n}),n){if(console.error("[MembershipAPI] Insert error details:",n),n.message&&n.message.includes("Too Many Requests")){console.error("[MembershipAPI] Rate limit exceeded, retrying in 2 seconds..."),await new Promise(k=>setTimeout(k,2e3));const{data:c,error:u}=await s.from("membership_requests").insert(m).select().single();if(u)throw console.error("[MembershipAPI] Retry also failed:",u),u;return console.log("[MembershipAPI] Retry successful:",c),d.success(`Αίτημα Pilates δημιουργήθηκε: ${r} μαθήματα για ${b(a)}`),!0}throw n}return console.log("[MembershipAPI] Pilates request created successfully:",f),d.success(`Αίτημα Pilates δημιουργήθηκε: ${r} μαθήματα για ${b(a)}`),!0}catch(l){return console.error("Error creating Pilates membership request:",l),d.error("Σφάλμα κατά τη δημιουργία του αιτήματος Pilates"),!1}},C=async(e,t)=>{try{console.log(`[MembershipAPI] Updating Pilates pricing: ${e} = ${b(t)}`);const{data:r,error:a}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(a||!r)throw console.error("Error finding Pilates package:",a),new Error("Pilates package not found");const{error:o}=await s.from("membership_package_durations").update({price:t,updated_at:new Date().toISOString()}).eq("package_id",r.id).eq("duration_type",e);if(o)throw console.error("Error updating Pilates pricing:",o),o;return console.log(`[MembershipAPI] Pilates pricing updated successfully: ${e} = ${b(t)}`),d.success(`Η τιμή για ${w(e)} ενημερώθηκε σε ${b(t)}`),!0}catch(r){return console.error("Error updating Pilates pricing:",r),d.error("Σφάλμα κατά την ενημέρωση της τιμής Pilates"),!1}},T=async()=>{try{console.log("[MembershipAPI] Fetching Ultimate membership requests with separate locking...");const{data:e,error:t}=await s.from("membership_packages").select("id").eq("name","Ultimate").single();if(t||!e)return console.log("[MembershipAPI] No Ultimate package found or error:",t),[];console.log("[MembershipAPI] Found Ultimate package ID:",e.id);const{data:r,error:a}=await s.from("membership_requests").select(`
        *,
        user:user_profiles!membership_requests_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          profile_photo
        ),
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).eq("package_id",e.id).order("created_at",{ascending:!1});if(a)throw console.error("[MembershipAPI] Error fetching Ultimate requests:",a),a;if(console.log("[MembershipAPI] Found Ultimate requests:",(r==null?void 0:r.length)||0),!r||r.length===0)return[];const o=r.map(i=>({...i,installment_1_locked:i.installment_1_locked||!1,installment_2_locked:i.installment_2_locked||!1,installment_3_locked:i.installment_3_locked||!1,third_installment_deleted:i.third_installment_deleted||!1,third_installment_deleted_at:i.third_installment_deleted_at,third_installment_deleted_by:i.third_installment_deleted_by}));return console.log("[MembershipAPI] Returning Ultimate requests with locks:",o.length),o}catch(e){return console.error("[MembershipAPI] Error fetching Ultimate membership requests:",e),[]}},F=async(e,t,r,a=!1,o)=>{try{let i=o;if(!i){const{data:{user:_},error:g}=await s.auth.getUser();if(!_)throw new Error("User not authenticated");i=_.id}console.log("[MembershipAPI] Creating Ultimate membership request:",{packageId:e,durationType:t,requestedPrice:r,hasInstallments:a,userId:i});let p=e;if(e==="Ultimate"||e==="ultimate-package"){const{data:_,error:g}=await s.from("membership_packages").select("id").eq("name","Ultimate").eq("is_active",!0).single();if(g||!_)throw console.error("Error finding Ultimate package:",g),new Error("Ultimate package not found");p=_.id}const l={user_id:i,package_id:p,duration_type:t,requested_price:r,has_installments:a,status:"pending"};a&&(l.installment_1_amount=0,l.installment_2_amount=0,l.installment_3_amount=0,l.installment_1_payment_method="cash",l.installment_2_payment_method="cash",l.installment_3_payment_method="cash");const{data:h,error:m}=await s.from("membership_requests").insert(l).select().single();if(m)throw console.error("[MembershipAPI] Insert error:",m),m;return console.log("[MembershipAPI] Ultimate request created successfully:",h),a?d.success("Αίτημα Ultimate δημιουργήθηκε με επιλογή δόσεων. Ο διαχειριστής θα καθορίσει τα ποσά."):d.success(`Αίτημα Ultimate δημιουργήθηκε: ${b(r)}`),!0}catch(i){return console.error("Error creating Ultimate membership request:",i),d.error("Σφάλμα κατά τη δημιουργία του αιτήματος Ultimate"),!1}},N=async()=>{try{const{data:e,error:t}=await s.from("membership_package_durations").select(`
        id,
        package_id,
        duration_type,
        duration_days,
        price,
        classes_count,
        is_active,
        created_at,
        updated_at,
        membership_packages!inner(
          id,
          name,
          package_type
        )
      `).eq("membership_packages.name","Ultimate").eq("is_active",!0).order("price",{ascending:!0});if(t)throw console.error("Error fetching Ultimate package durations:",t),t;return e||[]}catch(e){return console.error("Error fetching Ultimate package durations:",e),[]}},G=async e=>{var t;try{console.log("[MembershipAPI] Approving Ultimate membership request with dual activation:",e);const{data:r,error:a}=await s.from("membership_requests").select(`
        *,
        user_profiles!membership_requests_user_id_fkey(user_id, first_name, last_name, email),
        membership_packages!membership_requests_package_id_fkey(id, name, package_type)
      `).eq("id",e).single();if(a||!r)throw console.error("[MembershipAPI] Error fetching request data:",a),a;if(((t=r.membership_packages)==null?void 0:t.name)!=="Ultimate")throw new Error("This function is only for Ultimate package requests");const{error:o}=await s.from("membership_requests").update({status:"approved",updated_at:new Date().toISOString()}).eq("id",e);if(o)throw console.error("[MembershipAPI] Error updating request status:",o),o;const{data:i,error:p}=await s.rpc("create_ultimate_dual_memberships",{p_user_id:r.user_id,p_ultimate_request_id:e,p_duration_days:365,p_start_date:new Date().toISOString().split("T")[0]});if(p)throw console.error("[MembershipAPI] Error creating dual memberships:",p),await s.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),p;if(!i||!i.success)throw console.error("[MembershipAPI] Dual activation failed:",i),await s.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),new Error((i==null?void 0:i.error)||"Failed to create dual memberships");return console.log("[MembershipAPI] Ultimate dual activation successful:",{requestId:e,userId:r.user_id,pilatesMembershipId:i.pilates_membership_id,freeGymMembershipId:i.free_gym_membership_id,startDate:i.start_date,endDate:i.end_date}),!0}catch(r){return console.error("[MembershipAPI] Error approving Ultimate membership request:",r),d.error("Σφάλμα κατά την έγκριση του Ultimate αιτήματος"),!1}};export{A as approveMembershipRequest,G as approveUltimateMembershipRequest,v as checkUserHasActiveMembership,E as createMembershipRequest,O as createPilatesMembershipRequest,F as createUltimateMembershipRequest,b as formatPrice,S as getDurationDisplayText,w as getDurationLabel,I as getMembershipPackageDurations,y as getMembershipPackages,M as getMembershipRequestsWithLockedInstallments,$ as getPilatesPackageDurations,T as getUltimateMembershipRequests,N as getUltimatePackageDurations,D as getUserActiveMemberships,q as getUserMembershipRequests,U as rejectMembershipRequest,R as updateMembershipPackageDuration,C as updatePilatesPackagePricing};
