import{s as a,z as i}from"./index-20cc1d6t.js";const E=async()=>{try{console.log("[MembershipAPI] ===== FETCHING MEMBERSHIP PACKAGES =====");const{data:r,error:t}=await a.from("membership_packages").select("*").eq("is_active",!0).order("name");if(console.log("[MembershipAPI] Query result - data:",r,"error:",t),t)throw t;return console.log("[MembershipAPI] Returning packages:",r||[]),r||[]}catch(r){return console.error("[MembershipAPI] ===== ERROR FETCHING MEMBERSHIP PACKAGES ====="),console.error("Error fetching membership packages:",r),i.error("Σφάλμα κατά τη φόρτωση των πακέτων συνδρομής"),[]}},I=async r=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(r))return console.error("Invalid package ID format:",r),[];const{data:e,error:s}=await a.from("membership_package_durations").select("*").eq("package_id",r).eq("is_active",!0).order("duration_days");if(s)throw s;return e||[]}catch(t){return console.error("Error fetching package durations:",t),i.error("Σφάλμα κατά τη φόρτωση των επιλογών διάρκειας"),[]}},k=async(r,t,e)=>{try{const{data:{user:s}}=await a.auth.getUser();if(!s)throw new Error("User not authenticated");const{error:o}=await a.from("membership_requests").insert({user_id:s.id,package_id:r,duration_type:t,requested_price:e,status:"pending"});if(o)throw o;return!0}catch(s){return console.error("Error creating membership request:",s),i.error("Σφάλμα κατά τη δημιουργία του αιτήματος"),!1}},y=async()=>{try{const{data:r,error:t}=await a.from("membership_requests").select(`
        *,
        user:user_profiles!membership_requests_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          profile_photo
        ),
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).order("created_at",{ascending:!1});if(t)throw t;return r||[]}catch(r){return console.error("Error fetching membership requests:",r),i.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},q=async r=>{try{const{data:t,error:e}=await a.from("membership_requests").select(`
        *,
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).eq("user_id",r).order("created_at",{ascending:!1});if(e)throw e;return t||[]}catch(t){return console.error("Error fetching user membership requests:",t),i.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},M=async r=>{try{const{data:{user:t}}=await a.auth.getUser();if(!t)throw new Error("User not authenticated");const{data:e,error:s}=await a.from("membership_requests").select("*").eq("id",r).single();if(s||!e)throw new Error("Request not found");const{data:o,error:h}=await a.from("membership_package_durations").select("*").eq("package_id",e.package_id).eq("duration_type",e.duration_type).single();if(h||!o)throw new Error("Duration not found");const n=new Date().toISOString().split("T")[0],u=new Date;u.setDate(u.getDate()+o.duration_days);const d=u.toISOString().split("T")[0],{error:_}=await a.from("membership_requests").update({status:"approved",approved_by:t.id,approved_at:new Date().toISOString()}).eq("id",r);if(_)throw _;const{error:f}=await a.from("memberships").insert({user_id:e.user_id,package_id:e.package_id,start_date:n,end_date:d,is_active:!0,approved_by:t.id,approved_at:new Date().toISOString(),duration_type:e.duration_type});if(f)throw f;if(e.classes_count&&e.classes_count>0){const{error:m}=await a.from("lesson_deposits").insert({user_id:e.user_id,package_id:e.package_id,total_classes:e.classes_count,remaining_classes:e.classes_count});m?console.error("Error creating lesson deposit:",m):console.log(`[MembershipAPI] Lesson deposit created: ${e.classes_count} classes for user ${e.user_id}`)}return!0}catch(t){return console.error("Error approving membership request:",t),i.error("Σφάλμα κατά την έγκριση του αιτήματος"),!1}},A=async(r,t)=>{try{const{data:{user:e}}=await a.auth.getUser();if(!e)throw new Error("User not authenticated");const{error:s}=await a.from("membership_requests").update({status:"rejected",rejected_reason:t}).eq("id",r);if(s)throw s;return!0}catch(e){return console.error("Error rejecting membership request:",e),i.error("Σφάλμα κατά την απόρριψη του αιτήματος"),!1}},R=async r=>{try{console.log("[MembershipAPI] ===== FETCHING USER ACTIVE MEMBERSHIPS ====="),console.log("[MembershipAPI] User ID:",r);const{data:t,error:e}=await a.from("memberships").select(`
        *,
        package:membership_packages(
          id,
          name,
          description
        )
      `).eq("user_id",r).eq("is_active",!0).order("end_date",{ascending:!1});if(console.log("[MembershipAPI] Query result - data:",t,"error:",e),e)throw e;const s=(t||[]).map(o=>({...o,status:o.is_active?"active":"expired",duration_type:o.duration_type||"month",approved_by:o.approved_by||null,approved_at:o.approved_at||o.created_at}));return console.log("[MembershipAPI] Returning active memberships:",s),s}catch(t){return console.error("[MembershipAPI] ===== ERROR FETCHING USER ACTIVE MEMBERSHIPS ====="),console.error("Error fetching user memberships:",t),i.error("Σφάλμα κατά τη φόρτωση των συνδρομών"),[]}},D=async(r,t)=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t))return console.error("Invalid package ID format:",t),!1;const{data:s,error:o}=await a.from("memberships").select("id").eq("user_id",r).eq("package_id",t).eq("is_active",!0).limit(1);if(o)throw o;return s&&s.length>0}catch(e){return console.error("Error checking active membership:",e),!1}},g=r=>new Intl.NumberFormat("el-GR",{style:"currency",currency:"EUR"}).format(r),P=r=>({year:"Έτος",semester:"Εξάμηνο",month:"Μήνας",lesson:"Μάθημα",pilates_trial:"1 Μάθημα (Trial)",pilates_1month:"4 Μαθήματα (1 μήνας)",pilates_2months:"8 Μαθήματα (2 μήνες)",pilates_3months:"16 Μαθημάτων (3 μήνες)",pilates_6months:"25 Μαθημάτων (6 μήνες)",pilates_1year:"50 Μαθημάτων (1 έτος)"})[r]||r,v=async(r,t)=>{try{console.log("[MembershipAPI] ===== UPDATING PACKAGE DURATION ====="),console.log("[MembershipAPI] Duration ID:",r,"New Price:",t);const{error:e}=await a.from("membership_package_durations").update({price:t,updated_at:new Date().toISOString()}).eq("id",r);if(e)throw console.error("[MembershipAPI] Error updating duration:",e),e;return console.log("[MembershipAPI] Duration updated successfully"),!0}catch(e){return console.error("[MembershipAPI] ===== ERROR UPDATING DURATION ====="),console.error("Error updating package duration:",e),i.error("Σφάλμα κατά την ενημέρωση της τιμής"),!1}},S=async()=>{try{console.log("[MembershipAPI] Loading Pilates package durations from database");const{data:r,error:t}=await a.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(t||!r)throw console.error("Error finding Pilates package:",t),new Error("Pilates package not found");const{data:e,error:s}=await a.from("membership_package_durations").select("*").eq("package_id",r.id).eq("is_active",!0).order("price",{ascending:!0});if(s)throw console.error("Error loading Pilates durations:",s),s;return console.log("[MembershipAPI] Loaded Pilates durations:",e),e||[]}catch(r){return console.error("Error loading Pilates package durations:",r),i.error("Σφάλμα κατά τη φόρτωση των επιλογών Pilates"),[]}},U=async(r,t,e,s,o)=>{var h;try{let n=o;if(n)console.log("[MembershipAPI] Using provided userId:",n);else{console.log("[MembershipAPI] Getting user from auth...");const{data:{user:c},error:l}=await a.auth.getUser();if(console.log("[MembershipAPI] Auth result:",{user:c,authError:l}),!c)throw new Error("User not authenticated");n=c.id}console.log("[MembershipAPI] Creating Pilates membership request:",{packageId:r,durationType:t,classesCount:e,requestedPrice:s,userId:n}),console.log("[MembershipAPI] Proceeding with user ID:",n),console.log("[MembershipAPI] Supabase client info:",{hasClient:!!a,hasAuth:!!((h=a)!=null&&h.auth)});let u=r;if(r==="Pilates"||r==="pilates-package"){const{data:c,error:l}=await a.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(l||!c)throw console.error("Error finding Pilates package:",l),new Error("Pilates package not found");u=c.id}const d={user_id:n,package_id:u,duration_type:t,requested_price:s,classes_count:e,status:"pending"};console.log("[MembershipAPI] Inserting membership request with data:",d),console.log("[MembershipAPI] Testing table access...");const{data:_,error:f}=await a.from("membership_requests").select("id").limit(1);console.log("[MembershipAPI] Test access result:",{testData:_,testError:f});const{data:m,error:p}=await a.from("membership_requests").insert(d).select().single();if(console.log("[MembershipAPI] Insert result:",{data:m,error:p}),p){if(console.error("[MembershipAPI] Insert error details:",p),p.message&&p.message.includes("Too Many Requests")){console.error("[MembershipAPI] Rate limit exceeded, retrying in 2 seconds..."),await new Promise(b=>setTimeout(b,2e3));const{data:c,error:l}=await a.from("membership_requests").insert(d).select().single();if(l)throw console.error("[MembershipAPI] Retry also failed:",l),l;return console.log("[MembershipAPI] Retry successful:",c),i.success(`Αίτημα Pilates δημιουργήθηκε: ${e} μαθήματα για ${g(s)}`),!0}throw p}return console.log("[MembershipAPI] Pilates request created successfully:",m),i.success(`Αίτημα Pilates δημιουργήθηκε: ${e} μαθήματα για ${g(s)}`),!0}catch(n){return console.error("Error creating Pilates membership request:",n),i.error("Σφάλμα κατά τη δημιουργία του αιτήματος Pilates"),!1}},$=async(r,t)=>{try{console.log(`[MembershipAPI] Updating Pilates pricing: ${r} = ${g(t)}`);const{data:e,error:s}=await a.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(s||!e)throw console.error("Error finding Pilates package:",s),new Error("Pilates package not found");const{error:o}=await a.from("membership_package_durations").update({price:t,updated_at:new Date().toISOString()}).eq("package_id",e.id).eq("duration_type",r);if(o)throw console.error("Error updating Pilates pricing:",o),o;return console.log(`[MembershipAPI] Pilates pricing updated successfully: ${r} = ${g(t)}`),i.success(`Η τιμή για ${P(r)} ενημερώθηκε σε ${g(t)}`),!0}catch(e){return console.error("Error updating Pilates pricing:",e),i.error("Σφάλμα κατά την ενημέρωση της τιμής Pilates"),!1}};export{q as a,R as b,S as c,P as d,D as e,g as f,E as g,U as h,k as i,I as j,y as k,v as l,M as m,A as r,$ as u};
