import{s as a,z as n}from"./index-D6Gv1okz.js";const E=async()=>{try{console.log("[MembershipAPI] ===== FETCHING MEMBERSHIP PACKAGES =====");const{data:e,error:t}=await a.from("membership_packages").select("*").eq("is_active",!0).order("name");if(console.log("[MembershipAPI] Query result - data:",e,"error:",t),t)throw t;return console.log("[MembershipAPI] Returning packages:",e||[]),e||[]}catch(e){return console.error("[MembershipAPI] ===== ERROR FETCHING MEMBERSHIP PACKAGES ====="),console.error("Error fetching membership packages:",e),n.error("Σφάλμα κατά τη φόρτωση των πακέτων συνδρομής"),[]}},y=async e=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e))return console.error("Invalid package ID format:",e),[];const{data:r,error:s}=await a.from("membership_package_durations").select("*").eq("package_id",e).eq("is_active",!0).order("duration_days");if(s)throw s;return r||[]}catch(t){return console.error("Error fetching package durations:",t),n.error("Σφάλμα κατά τη φόρτωση των επιλογών διάρκειας"),[]}},k=async(e,t,r)=>{try{const{data:{user:s}}=await a.auth.getUser();if(!s)throw new Error("User not authenticated");const{error:o}=await a.from("membership_requests").insert({user_id:s.id,package_id:e,duration_type:t,requested_price:r,status:"pending"});if(o)throw o;return!0}catch(s){return console.error("Error creating membership request:",s),n.error("Σφάλμα κατά τη δημιουργία του αιτήματος"),!1}},q=async()=>{try{const{data:e,error:t}=await a.from("membership_requests").select(`
        *,
        user:user_profiles!membership_requests_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          profile_photo
        ),
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).order("created_at",{ascending:!1});if(t)throw t;return e||[]}catch(e){return console.error("Error fetching membership requests:",e),n.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},I=async e=>{try{const{data:t,error:r}=await a.from("membership_requests").select(`
        *,
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).eq("user_id",e).order("created_at",{ascending:!1});if(r)throw r;return t||[]}catch(t){return console.error("Error fetching user membership requests:",t),n.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},M=async e=>{try{const{data:{user:t}}=await a.auth.getUser();if(!t)throw new Error("User not authenticated");const{data:r,error:s}=await a.from("membership_requests").select("*").eq("id",e).single();if(s||!r)throw new Error("Request not found");const{data:o,error:i}=await a.from("membership_package_durations").select("*").eq("package_id",r.package_id).eq("duration_type",r.duration_type).single();if(i||!o)throw new Error("Duration not found");const c=new Date().toISOString().split("T")[0],l=new Date;l.setDate(l.getDate()+o.duration_days);const g=l.toISOString().split("T")[0],{error:u}=await a.from("membership_requests").update({status:"approved",approved_by:t.id,approved_at:new Date().toISOString()}).eq("id",e);if(u)throw u;const{error:p}=await a.from("memberships").insert({user_id:r.user_id,package_id:r.package_id,start_date:c,end_date:g,is_active:!0,approved_by:t.id,approved_at:new Date().toISOString(),duration_type:r.duration_type});if(p)throw p;if(r.classes_count&&r.classes_count>0){const{error:m}=await a.from("lesson_deposits").insert({user_id:r.user_id,package_id:r.package_id,total_classes:r.classes_count,remaining_classes:r.classes_count});m?console.error("Error creating lesson deposit:",m):console.log(`[MembershipAPI] Lesson deposit created: ${r.classes_count} classes for user ${r.user_id}`)}return!0}catch(t){return console.error("Error approving membership request:",t),n.error("Σφάλμα κατά την έγκριση του αιτήματος"),!1}},A=async(e,t)=>{try{const{data:{user:r}}=await a.auth.getUser();if(!r)throw new Error("User not authenticated");const{error:s}=await a.from("membership_requests").update({status:"rejected",rejected_reason:t}).eq("id",e);if(s)throw s;return!0}catch(r){return console.error("Error rejecting membership request:",r),n.error("Σφάλμα κατά την απόρριψη του αιτήματος"),!1}},U=async e=>{try{console.log("[MembershipAPI] ===== FETCHING USER ACTIVE MEMBERSHIPS ====="),console.log("[MembershipAPI] User ID:",e);const{data:t,error:r}=await a.from("memberships").select(`
        *,
        package:membership_packages(
          id,
          name,
          description,
          package_type
        )
      `).eq("user_id",e).eq("is_active",!0).gte("end_date",new Date().toISOString().split("T")[0]).order("end_date",{ascending:!1});if(console.log("[MembershipAPI] Query result - data:",t,"error:",r),r)throw r;const s=(t||[]).map(o=>({...o,status:o.status||"active",duration_type:o.duration_type||"month",approved_by:o.approved_by||null,approved_at:o.approved_at||o.created_at}));return console.log("[MembershipAPI] Returning active memberships:",s),s}catch(t){return console.error("[MembershipAPI] ===== ERROR FETCHING USER ACTIVE MEMBERSHIPS ====="),console.error("Error fetching user memberships:",t),n.error("Σφάλμα κατά τη φόρτωση των συνδρομών"),[]}},D=async(e,t)=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t))return console.error("Invalid package ID format:",t),!1;const{data:s,error:o}=await a.from("memberships").select("id").eq("user_id",e).eq("package_id",t).eq("is_active",!0).gte("end_date",new Date().toISOString().split("T")[0]).limit(1);if(o)throw o;return s&&s.length>0}catch(r){return console.error("Error checking active membership:",r),!1}},f=e=>new Intl.NumberFormat("el-GR",{style:"currency",currency:"EUR"}).format(e),w=e=>({year:"Έτος",semester:"Εξάμηνο",month:"Μήνας",lesson:"Μάθημα",pilates_trial:"1 Μάθημα (Trial)",pilates_1month:"4 Μαθήματα (1 μήνας)",pilates_2months:"8 Μαθήματα (2 μήνες)",pilates_3months:"16 Μαθημάτων (3 μήνες)",pilates_6months:"25 Μαθημάτων (6 μήνες)",pilates_1year:"50 Μαθημάτων (1 έτος)",ultimate_1year:"1 Έτος Ultimate"})[e]||e,v=async(e,t)=>{try{console.log("[MembershipAPI] ===== UPDATING PACKAGE DURATION ====="),console.log("[MembershipAPI] Duration ID:",e,"New Price:",t);const{error:r}=await a.from("membership_package_durations").update({price:t,updated_at:new Date().toISOString()}).eq("id",e);if(r)throw console.error("[MembershipAPI] Error updating duration:",r),r;return console.log("[MembershipAPI] Duration updated successfully"),!0}catch(r){return console.error("[MembershipAPI] ===== ERROR UPDATING DURATION ====="),console.error("Error updating package duration:",r),n.error("Σφάλμα κατά την ενημέρωση της τιμής"),!1}},R=async()=>{try{console.log("[MembershipAPI] Loading Pilates package durations from database");const{data:e,error:t}=await a.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(t||!e)throw console.error("Error finding Pilates package:",t),new Error("Pilates package not found");const{data:r,error:s}=await a.from("membership_package_durations").select("*").eq("package_id",e.id).eq("is_active",!0).order("price",{ascending:!0});if(s)throw console.error("Error loading Pilates durations:",s),s;return console.log("[MembershipAPI] Loaded Pilates durations:",r),r||[]}catch(e){return console.error("Error loading Pilates package durations:",e),n.error("Σφάλμα κατά τη φόρτωση των επιλογών Pilates"),[]}},S=async(e,t,r,s,o)=>{var i;try{let c=o;if(c)console.log("[MembershipAPI] Using provided userId:",c);else{console.log("[MembershipAPI] Getting user from auth...");const{data:{user:d},error:h}=await a.auth.getUser();if(console.log("[MembershipAPI] Auth result:",{user:d,authError:h}),!d)throw new Error("User not authenticated");c=d.id}console.log("[MembershipAPI] Creating Pilates membership request:",{packageId:e,durationType:t,classesCount:r,requestedPrice:s,userId:c}),console.log("[MembershipAPI] Proceeding with user ID:",c),console.log("[MembershipAPI] Supabase client info:",{hasClient:!!a,hasAuth:!!((i=a)!=null&&i.auth)});let l=e;if(e==="Pilates"||e==="pilates-package"){const{data:d,error:h}=await a.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(h||!d)throw console.error("Error finding Pilates package:",h),new Error("Pilates package not found");l=d.id}const g={user_id:c,package_id:l,duration_type:t,requested_price:s,classes_count:r,status:"pending"};console.log("[MembershipAPI] Inserting membership request with data:",g),console.log("[MembershipAPI] Testing table access...");const{data:u,error:p}=await a.from("membership_requests").select("id").limit(1);console.log("[MembershipAPI] Test access result:",{testData:u,testError:p});const{data:m,error:_}=await a.from("membership_requests").insert(g).select().single();if(console.log("[MembershipAPI] Insert result:",{data:m,error:_}),_){if(console.error("[MembershipAPI] Insert error details:",_),_.message&&_.message.includes("Too Many Requests")){console.error("[MembershipAPI] Rate limit exceeded, retrying in 2 seconds..."),await new Promise(b=>setTimeout(b,2e3));const{data:d,error:h}=await a.from("membership_requests").insert(g).select().single();if(h)throw console.error("[MembershipAPI] Retry also failed:",h),h;return console.log("[MembershipAPI] Retry successful:",d),n.success(`Αίτημα Pilates δημιουργήθηκε: ${r} μαθήματα για ${f(s)}`),!0}throw _}return console.log("[MembershipAPI] Pilates request created successfully:",m),n.success(`Αίτημα Pilates δημιουργήθηκε: ${r} μαθήματα για ${f(s)}`),!0}catch(c){return console.error("Error creating Pilates membership request:",c),n.error("Σφάλμα κατά τη δημιουργία του αιτήματος Pilates"),!1}},O=async(e,t)=>{try{console.log(`[MembershipAPI] Updating Pilates pricing: ${e} = ${f(t)}`);const{data:r,error:s}=await a.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(s||!r)throw console.error("Error finding Pilates package:",s),new Error("Pilates package not found");const{error:o}=await a.from("membership_package_durations").update({price:t,updated_at:new Date().toISOString()}).eq("package_id",r.id).eq("duration_type",e);if(o)throw console.error("Error updating Pilates pricing:",o),o;return console.log(`[MembershipAPI] Pilates pricing updated successfully: ${e} = ${f(t)}`),n.success(`Η τιμή για ${w(e)} ενημερώθηκε σε ${f(t)}`),!0}catch(r){return console.error("Error updating Pilates pricing:",r),n.error("Σφάλμα κατά την ενημέρωση της τιμής Pilates"),!1}},T=async(e,t,r,s=!1,o)=>{try{let i=o;if(!i){const{data:{user:p},error:m}=await a.auth.getUser();if(!p)throw new Error("User not authenticated");i=p.id}console.log("[MembershipAPI] Creating Ultimate membership request:",{packageId:e,durationType:t,requestedPrice:r,hasInstallments:s,userId:i});let c=e;if(e==="Ultimate"||e==="ultimate-package"){const{data:p,error:m}=await a.from("membership_packages").select("id").eq("name","Ultimate").eq("is_active",!0).single();if(m||!p)throw console.error("Error finding Ultimate package:",m),new Error("Ultimate package not found");c=p.id}const l={user_id:i,package_id:c,duration_type:t,requested_price:r,has_installments:s,status:"pending"};s&&(l.installment_1_amount=0,l.installment_2_amount=0,l.installment_3_amount=0,l.installment_1_payment_method="cash",l.installment_2_payment_method="cash",l.installment_3_payment_method="cash");const{data:g,error:u}=await a.from("membership_requests").insert(l).select().single();if(u)throw console.error("[MembershipAPI] Insert error:",u),u;return console.log("[MembershipAPI] Ultimate request created successfully:",g),s?n.success("Αίτημα Ultimate δημιουργήθηκε με επιλογή δόσεων. Ο διαχειριστής θα καθορίσει τα ποσά."):n.success(`Αίτημα Ultimate δημιουργήθηκε: ${f(r)}`),!0}catch(i){return console.error("Error creating Ultimate membership request:",i),n.error("Σφάλμα κατά τη δημιουργία του αιτήματος Ultimate"),!1}},$=async()=>{try{const{data:e,error:t}=await a.from("membership_package_durations").select(`
        id,
        package_id,
        duration_type,
        duration_days,
        price,
        classes_count,
        is_active,
        created_at,
        updated_at,
        membership_packages!inner(
          id,
          name,
          package_type
        )
      `).eq("membership_packages.name","Ultimate").eq("is_active",!0).order("price",{ascending:!0});if(t)throw console.error("Error fetching Ultimate package durations:",t),t;return e||[]}catch(e){return console.error("Error fetching Ultimate package durations:",e),[]}},G=async e=>{var t;try{console.log("[MembershipAPI] Approving Ultimate membership request with dual activation:",e);const{data:r,error:s}=await a.from("membership_requests").select(`
        *,
        user_profiles!membership_requests_user_id_fkey(user_id, first_name, last_name, email),
        membership_packages!membership_requests_package_id_fkey(id, name, package_type)
      `).eq("id",e).single();if(s||!r)throw console.error("[MembershipAPI] Error fetching request data:",s),s;if(((t=r.membership_packages)==null?void 0:t.name)!=="Ultimate")throw new Error("This function is only for Ultimate package requests");const{error:o}=await a.from("membership_requests").update({status:"approved",updated_at:new Date().toISOString()}).eq("id",e);if(o)throw console.error("[MembershipAPI] Error updating request status:",o),o;const{data:i,error:c}=await a.rpc("create_ultimate_dual_memberships",{p_user_id:r.user_id,p_ultimate_request_id:e,p_duration_days:365,p_start_date:new Date().toISOString().split("T")[0]});if(c)throw console.error("[MembershipAPI] Error creating dual memberships:",c),await a.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),c;if(!i||!i.success)throw console.error("[MembershipAPI] Dual activation failed:",i),await a.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),new Error((i==null?void 0:i.error)||"Failed to create dual memberships");return console.log("[MembershipAPI] Ultimate dual activation successful:",{requestId:e,userId:r.user_id,pilatesMembershipId:i.pilates_membership_id,freeGymMembershipId:i.free_gym_membership_id,startDate:i.start_date,endDate:i.end_date}),!0}catch(r){return console.error("[MembershipAPI] Error approving Ultimate membership request:",r),n.error("Σφάλμα κατά την έγκριση του Ultimate αιτήματος"),!1}};export{M as approveMembershipRequest,G as approveUltimateMembershipRequest,D as checkUserHasActiveMembership,k as createMembershipRequest,S as createPilatesMembershipRequest,T as createUltimateMembershipRequest,f as formatPrice,w as getDurationLabel,y as getMembershipPackageDurations,E as getMembershipPackages,q as getMembershipRequests,R as getPilatesPackageDurations,$ as getUltimatePackageDurations,U as getUserActiveMemberships,I as getUserMembershipRequests,A as rejectMembershipRequest,v as updateMembershipPackageDuration,O as updatePilatesPackagePricing};
