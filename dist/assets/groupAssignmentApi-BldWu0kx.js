const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/groupTrainingCalendarApi-pf-_1EQW.js","assets/index-BmeQlVRf.js","assets/index-BW2mbWrF.css"])))=>i.map(i=>d[i]);
import{s as u,_ as f}from"./index-BmeQlVRf.js";const h=async(o,r)=>{try{console.log("[GroupSessionsAPI] Fetching group sessions for user/program...",{userId:o,programId:r});const{data:t,error:e}=await u.from("group_sessions").select("*").eq("user_id",o).eq("is_active",!0);console.log("[GroupSessionsAPI] All user sessions:",t);const{data:n,error:s}=await u.from("group_sessions").select("*").eq("user_id",o).eq("program_id",r).eq("is_active",!0).order("session_date",{ascending:!0}).order("start_time",{ascending:!0});return s?(console.error("[GroupSessionsAPI] Error fetching group sessions:",s),[]):(console.log("[GroupSessionsAPI] Fetched group sessions for program:",n),console.log("[GroupSessionsAPI] Group sessions count:",(n==null?void 0:n.length)||0),n||[])}catch(t){return console.error("[GroupSessionsAPI] Unexpected error:",t),[]}},w=async(o,r,t,e)=>{try{console.log("[GroupSessionsAPI] Creating group sessions for user...",{userId:o,programId:r,sessionsCount:t.length});const{validateSessionCreation:n}=await f(async()=>{const{validateSessionCreation:i}=await import("./groupTrainingCalendarApi-pf-_1EQW.js");return{validateSessionCreation:i}},__vite__mapDeps([0,1,2])),s=[],a=[];for(const i of t){console.log("[GroupSessionsAPI] Processing session with smart grouping:",i);const{data:l,error:m}=await u.from("group_sessions").select("id, user_id, group_type").eq("session_date",i.session_date).eq("start_time",i.start_time).eq("end_time",i.end_time).eq("trainer",i.trainer).eq("room",i.room).eq("group_type",i.group_type).eq("is_active",!0);if(m){console.error("[GroupSessionsAPI] Error checking existing sessions:",m),a.push(`${i.session_date} ${i.start_time} - Error checking existing sessions`);continue}const g=(l==null?void 0:l.length)||0,_=i.group_type;if(console.log("[GroupSessionsAPI] Existing session check:",{date:i.session_date,time:i.start_time,room:i.room,groupType:i.group_type,currentOccupancy:g,maxCapacity:_,hasSpace:g<_}),g>=_){console.warn("[GroupSessionsAPI] Session blocked - capacity full:",{currentOccupancy:g,maxCapacity:_}),a.push(`${i.session_date} ${i.start_time} - Session is full (${g}/${_})`);continue}console.log("[GroupSessionsAPI] Adding user to session (existing or new):",{currentOccupancy:g,maxCapacity:_,willBe:`${g+1}/${_}`}),s.push({program_id:r,user_id:o,session_date:i.session_date,start_time:i.start_time,end_time:i.end_time,trainer:i.trainer,room:i.room,group_type:i.group_type,notes:i.notes||"Group session created by admin",is_active:!0,created_by:e})}if(s.length===0)return{success:!1,error:"All sessions were blocked due to capacity limits",blockedSessions:a};const{data:c,error:p}=await u.from("group_sessions").insert(s).select();if(p)return console.error("[GroupSessionsAPI] Error creating group sessions:",p),{success:!1,error:p.message};console.log("[GroupSessionsAPI] Created group sessions successfully:",c==null?void 0:c.length);const d={success:!0,createdCount:(c==null?void 0:c.length)||0,blockedSessions:a.length>0?a:void 0};return a.length>0&&console.log("[GroupSessionsAPI] Some sessions were blocked:",a),d}catch(n){return console.error("[GroupSessionsAPI] Unexpected error:",n),{success:!1,error:"Unexpected error occurred"}}},G=async o=>{try{console.log("[GroupAssignmentAPI] Fetching available group slots...");const{data:r,error:t}=await u.rpc("get_available_group_slots",{p_day_of_week:o||null});if(t)throw console.error("[GroupAssignmentAPI] Error fetching group slots:",t),t;return console.log("[GroupAssignmentAPI] Fetched group slots:",r),r.map(e=>({id:e.template_id,groupType:e.group_type,dayOfWeek:e.day_of_week,startTime:e.start_time,endTime:e.end_time,trainer:e.trainer,room:e.room,groupIdentifier:e.group_identifier,maxCapacity:e.max_capacity,currentAssignments:e.current_assignments,availableSpots:e.available_spots,isFull:e.is_full}))}catch(r){throw console.error("[GroupAssignmentAPI] Failed to fetch available group slots:",r),r}},P=async(o,r,t,e,n,s,a)=>{try{console.log("[GroupAssignmentAPI] Validating group assignment...",{userId:o,programId:r,groupIdentifier:t,dayOfWeek:e,startTime:n,endTime:s,targetWeeklyFrequency:a});const{data:c,error:p}=await u.rpc("validate_group_assignment",{p_user_id:o,p_program_id:r,p_group_identifier:t,p_day_of_week:e,p_start_time:n,p_end_time:s,p_target_weekly_frequency:a});if(p)throw console.error("[GroupAssignmentAPI] Error validating assignment:",p),p;return console.log("[GroupAssignmentAPI] Validation result:",c[0]),{isValid:c[0].is_valid,errorMessage:c[0].error_message,errorType:c[0].error_type}}catch(c){throw console.error("[GroupAssignmentAPI] Failed to validate group assignment:",c),c}},I=async(o,r,t,e,n)=>{try{console.log("[GroupAssignmentAPI] Creating group assignment...",{programId:o,userId:r,groupIdentifier:t,weeklyFrequency:e,notes:n});const{data:s,error:a}=await u.rpc("create_group_assignment",{p_program_id:o,p_user_id:r,p_group_identifier:t,p_weekly_frequency:e,p_notes:n||null});if(a)throw console.error("[GroupAssignmentAPI] Error creating assignment:",a),a;return console.log("[GroupAssignmentAPI] Assignment creation result:",s[0]),{success:s[0].success,assignmentId:s[0].assignment_id,message:s[0].message}}catch(s){throw console.error("[GroupAssignmentAPI] Failed to create group assignment:",s),s}},q=async(o,r)=>{try{console.log("[GroupAssignmentAPI] Fetching user group assignments...",{userId:o,programId:r});let t=u.from("group_assignments").select(`
        id,
        program_id,
        user_id,
        group_type,
        day_of_week,
        start_time,
        end_time,
        trainer,
        room,
        group_identifier,
        weekly_frequency,
        assignment_date,
        is_active,
        created_by,
        created_at,
        updated_at,
        notes
      `).eq("user_id",o).eq("is_active",!0).order("day_of_week",{ascending:!0}).order("start_time",{ascending:!0});r&&(t=t.eq("program_id",r));const{data:e,error:n}=await t;if(n)throw console.error("[GroupAssignmentAPI] Error fetching user assignments:",n),n;return console.log("[GroupAssignmentAPI] Fetched user assignments:",e),e.map(s=>({id:s.id,programId:s.program_id,userId:s.user_id,groupType:s.group_type,dayOfWeek:s.day_of_week,startTime:s.start_time,endTime:s.end_time,trainer:s.trainer,room:s.room,groupIdentifier:s.group_identifier,weeklyFrequency:s.weekly_frequency,assignmentDate:s.assignment_date,isActive:s.is_active,createdBy:s.created_by,createdAt:s.created_at,updatedAt:s.updated_at,notes:s.notes}))}catch(t){throw console.error("[GroupAssignmentAPI] Failed to fetch user group assignments:",t),t}},k=async o=>{try{console.log("[GroupAssignmentAPI] Fetching group slot assignments...",{groupIdentifier:o});const{data:r,error:t}=await u.from("group_assignments").select(`
        id,
        program_id,
        user_id,
        group_type,
        day_of_week,
        start_time,
        end_time,
        trainer,
        room,
        group_identifier,
        weekly_frequency,
        assignment_date,
        is_active,
        created_by,
        created_at,
        updated_at,
        notes,
        user_profiles!group_assignments_user_id_fkey (
          first_name,
          last_name,
          email
        )
      `).eq("group_identifier",o).eq("is_active",!0).order("created_at",{ascending:!0});if(t)throw console.error("[GroupAssignmentAPI] Error fetching group slot assignments:",t),t;return console.log("[GroupAssignmentAPI] Fetched group slot assignments:",r),r.map(e=>({id:e.id,programId:e.program_id,userId:e.user_id,groupType:e.group_type,dayOfWeek:e.day_of_week,startTime:e.start_time,endTime:e.end_time,trainer:e.trainer,room:e.room,groupIdentifier:e.group_identifier,weeklyFrequency:e.weekly_frequency,assignmentDate:e.assignment_date,isActive:e.is_active,createdBy:e.created_by,createdAt:e.created_at,updatedAt:e.updated_at,notes:e.notes,userInfo:e.user_profiles}))}catch(r){throw console.error("[GroupAssignmentAPI] Failed to fetch group slot assignments:",r),r}},v=async o=>{try{console.log("[GroupAssignmentAPI] Removing group assignment...",{assignmentId:o});const{error:r}=await u.from("group_assignments").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",o);if(r)throw console.error("[GroupAssignmentAPI] Error removing assignment:",r),r;return console.log("[GroupAssignmentAPI] Assignment removed successfully"),!0}catch(r){throw console.error("[GroupAssignmentAPI] Failed to remove group assignment:",r),r}},S=async(o,r)=>{try{console.log("[GroupAssignmentAPI] Fetching user weekly assignments...",{userId:o,programId:r});const{data:t,error:e}=await u.from("user_weekly_assignments").select("*").eq("user_id",o).eq("program_id",r).order("week_start_date",{ascending:!1});if(e)throw console.error("[GroupAssignmentAPI] Error fetching weekly assignments:",e),e;return console.log("[GroupAssignmentAPI] Fetched weekly assignments:",t),t.map(n=>({id:n.id,userId:n.user_id,programId:n.program_id,targetWeeklyFrequency:n.target_weekly_frequency,currentAssignmentsCount:n.current_assignments_count,weekStartDate:n.week_start_date,isComplete:n.is_complete,createdAt:n.created_at,updatedAt:n.updated_at}))}catch(t){throw console.error("[GroupAssignmentAPI] Failed to fetch user weekly assignments:",t),t}},E=o=>["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"][o]||"Άγνωστη",b=o=>o.substring(0,5),F=o=>`${o} άτομα`,C=async(o,r,t,e,n,s)=>{try{console.log("[GroupAssignmentAPI] Checking room capacity...",{date:o,startTime:r,endTime:t,room:e,groupType:n,excludeUserId:s});let a=u.from("group_assignments").select("id, user_id, group_type").eq("assignment_date",o).eq("start_time",r).eq("end_time",t).eq("room",e).eq("group_type",n).eq("is_active",!0);s&&(a=a.neq("user_id",s));const{data:c,error:p}=await a;if(p)throw console.error("[GroupAssignmentAPI] Error checking assignments:",p),p;const{data:d,error:i}=await u.from("group_sessions").select("id, user_id, group_type").eq("session_date",o).eq("start_time",r).eq("end_time",t).eq("room",e).eq("group_type",n).eq("is_active",!0);if(i)throw console.error("[GroupAssignmentAPI] Error checking sessions:",i),i;const l=(c==null?void 0:c.length)||0,m=(d==null?void 0:d.length)||0,g=l+m,_=n,A=g<_;return console.log("[GroupAssignmentAPI] Room capacity check result (SAME GROUP TYPE ONLY):",{groupType:n,assignmentsCount:l,sessionsCount:m,currentOccupancy:g,maxCapacity:_,isAvailable:A,excludedUser:s}),{isAvailable:A,currentOccupancy:g,maxCapacity:_}}catch(a){throw console.error("[GroupAssignmentAPI] Failed to check room capacity:",a),a}},O=async(o,r,t)=>{try{console.log("[GroupAssignmentAPI] Sending program notification to user:",{userId:o,programId:r});const{data:e,error:n}=await u.from("user_profiles").select("first_name, last_name, email").eq("user_id",o).single();if(n)return console.error("[GroupAssignmentAPI] Error fetching user profile:",n),!1;const{data:s,error:a}=await u.from("personal_training_schedules").select("group_room_size, weekly_frequency, status").eq("id",r).single();if(a)return console.error("[GroupAssignmentAPI] Error fetching program info:",a),!1;const{error:c}=await u.from("personal_training_schedules").update({status:"accepted",accepted_at:new Date().toISOString()}).eq("id",r);return c?(console.error("[GroupAssignmentAPI] Error updating program status:",c),!1):(console.log("[GroupAssignmentAPI] Program notification sent successfully"),console.log("[GroupAssignmentAPI] User will see their program as accepted with group assignments"),!0)}catch(e){return console.error("[GroupAssignmentAPI] Failed to send program notification:",e),!1}};export{q as a,S as b,E as c,F as d,I as e,b as f,G as g,k as h,C as i,w as j,h as k,v as r,O as s,P as v};
