import{s as i}from"./index-ZmRz_kF8.js";const u=async()=>{const{data:s,error:t}=await i.from("pilates_schedule_slots").select("*").order("date",{ascending:!0}).order("start_time",{ascending:!0});if(t)throw console.error("Error fetching pilates schedule slots:",t),t;return s||[]},f=async(s,t)=>{try{console.log("Fetching available pilates slots...");const e=(()=>{const o=new Date,d=o.getFullYear(),g=String(o.getMonth()+1).padStart(2,"0"),_=String(o.getDate()).padStart(2,"0");return`${d}-${g}-${_}`})(),a=s||e,n=t||(()=>{const o=new Date(a+"T12:00:00");o.setDate(o.getDate()+13);const d=o.getFullYear(),g=String(o.getMonth()+1).padStart(2,"0"),_=String(o.getDate()).padStart(2,"0");return`${d}-${g}-${_}`})(),{data:r,error:l}=await i.from("pilates_slots_with_occupancy").select("*").eq("is_active",!0).gte("date",a).lte("date",n).order("date",{ascending:!0}).order("start_time",{ascending:!0});if(l)throw console.error("Error fetching available pilates slots:",l),l;console.log("Fetched slots from DB:",(r==null?void 0:r.length)||0),console.log("Sample slots from DB:",r==null?void 0:r.slice(0,5));const c=(r||[]).map(o=>({id:o.slot_id,date:o.date,start_time:o.start_time,end_time:o.end_time,max_capacity:o.max_capacity,available_capacity:Math.max(0,(o.max_capacity||0)-(o.booked_count||0)),status:"available",is_active:o.is_active,booked_count:o.booked_count||0}));return console.log("Transformed slots:",c.length),console.log("Sample transformed slots:",c.slice(0,5)),c}catch(e){throw console.error("Error fetching available pilates slots:",e),e}},h=async s=>{const{data:t,error:e}=await i.from("pilates_deposits").select("deposit_remaining, is_active").eq("user_id",s).eq("is_active",!0).order("credited_at",{ascending:!1}).limit(1);return e?(console.error("Error fetching active pilates deposit:",e),null):t&&t.length>0?t[0]:null},b=s=>i.channel("realtime:pila").on("postgres_changes",{event:"*",schema:"public",table:"pilates_bookings"},s).on("postgres_changes",{event:"*",schema:"public",table:"pilates_schedule_slots"},s).subscribe(),m=async s=>{let t=i.from("pilates_bookings").select(`
      *,
      slot:pilates_schedule_slots(*),
      user:user_profiles(*)
    `).order("booking_date",{ascending:!1});s&&(t=t.eq("user_id",s));const{data:e,error:a}=await t;if(a)throw console.error("Error fetching pilates bookings:",a),a;return e||[]},k=async(s,t)=>{var c;const{data:e,error:a}=await i.rpc("book_pilates_class",{p_user_id:t,p_slot_id:s.slotId});if(a)throw console.error("Error booking pilates via RPC:",a),a;const n=((c=e==null?void 0:e[0])==null?void 0:c.booking_id)||(e==null?void 0:e.booking_id);if(!n)throw new Error("Booking failed: missing booking id");const{data:r,error:l}=await i.from("pilates_bookings").select(`
      *,
      slot:pilates_schedule_slots(*),
      user:user_profiles(*)
    `).eq("id",n).single();if(l)throw console.error("Error fetching created booking:",l),l;return r},w=async(s,t)=>{if(!t){const{data:{user:r}}=await i.auth.getUser();t=r==null?void 0:r.id}const{error:e}=await i.rpc("cancel_pilates_booking",{p_booking_id:s,p_user_id:t});if(e)throw console.error("Error cancelling pilates via RPC:",e),e;const{data:a,error:n}=await i.from("pilates_bookings").select(`
      *,
      slot:pilates_schedule_slots(*),
      user:user_profiles(*)
    `).eq("id",s).single();if(n)throw console.error("Error fetching cancelled booking:",n),n;return a},y=async s=>{const{data:t,error:e}=await i.from("pilates_bookings").select(`
      *,
      user:user_profiles(first_name, last_name, email)
    `).eq("slot_id",s).eq("status","confirmed").order("booking_date",{ascending:!0});if(e)throw console.error("Error fetching pilates slot bookings:",e),e;return t||[]};export{f as a,y as b,m as c,h as d,w as e,k as f,u as g,b as s};
