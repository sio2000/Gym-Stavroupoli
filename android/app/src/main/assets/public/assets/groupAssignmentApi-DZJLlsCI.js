const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/groupTrainingCalendarApi-C4SB04po.js","assets/index-ZmRz_kF8.js","assets/index-CL_ZVhm7.css"])))=>i.map(i=>d[i]);
import{s as u,_ as f}from"./index-ZmRz_kF8.js";const h=async(s,r)=>{try{console.log("[GroupSessionsAPI] Fetching group sessions for user/program...",{userId:s,programId:r});const{data:o,error:e}=await u.from("group_sessions").select("*").eq("user_id",s).eq("is_active",!0);console.log("[GroupSessionsAPI] All user sessions:",o);const{data:n,error:t}=await u.from("group_sessions").select("*").eq("user_id",s).eq("program_id",r).eq("is_active",!0).order("session_date",{ascending:!0}).order("start_time",{ascending:!0});return t?(console.error("[GroupSessionsAPI] Error fetching group sessions:",t),[]):(console.log("[GroupSessionsAPI] Fetched group sessions for program:",n),console.log("[GroupSessionsAPI] Group sessions count:",(n==null?void 0:n.length)||0),n||[])}catch(o){return console.error("[GroupSessionsAPI] Unexpected error:",o),[]}},w=async(s,r,o,e)=>{try{console.log("[GroupSessionsAPI] Creating group sessions for user...",{userId:s,programId:r,sessionsCount:o.length});const{validateSessionCreation:n}=await f(async()=>{const{validateSessionCreation:i}=await import("./groupTrainingCalendarApi-C4SB04po.js");return{validateSessionCreation:i}},__vite__mapDeps([0,1,2])),t=[],a=[];for(const i of o){console.log("[GroupSessionsAPI] Processing session with smart grouping:",i);const{data:_,error:m}=await u.from("group_sessions").select("id, user_id, group_type").eq("session_date",i.session_date).eq("start_time",i.start_time).eq("end_time",i.end_time).eq("trainer",i.trainer).eq("room",i.room).eq("group_type",i.group_type).eq("is_active",!0);if(m){console.error("[GroupSessionsAPI] Error checking existing sessions:",m),a.push(`${i.session_date} ${i.start_time} - Error checking existing sessions`);continue}const g=(_==null?void 0:_.length)||0,l=i.group_type;if(console.log("[GroupSessionsAPI] Existing session check:",{date:i.session_date,time:i.start_time,room:i.room,groupType:i.group_type,currentOccupancy:g,maxCapacity:l,hasSpace:g<l}),g>=l){console.warn("[GroupSessionsAPI] Session blocked - capacity full:",{currentOccupancy:g,maxCapacity:l}),a.push(`${i.session_date} ${i.start_time} - Session is full (${g}/${l})`);continue}console.log("[GroupSessionsAPI] Adding user to session (existing or new):",{currentOccupancy:g,maxCapacity:l,willBe:`${g+1}/${l}`}),t.push({program_id:r,user_id:s,session_date:i.session_date,start_time:i.start_time,end_time:i.end_time,trainer:i.trainer,room:i.room,group_type:i.group_type,notes:i.notes||"Group session created by admin",is_active:!0,created_by:e})}if(t.length===0)return{success:!1,error:"All sessions were blocked due to capacity limits",blockedSessions:a};const{data:c,error:p}=await u.from("group_sessions").insert(t).select();if(p)return console.error("[GroupSessionsAPI] Error creating group sessions:",p),{success:!1,error:p.message};console.log("[GroupSessionsAPI] Created group sessions successfully:",c==null?void 0:c.length);const d={success:!0,createdCount:(c==null?void 0:c.length)||0,blockedSessions:a.length>0?a:void 0};return a.length>0&&console.log("[GroupSessionsAPI] Some sessions were blocked:",a),d}catch(n){return console.error("[GroupSessionsAPI] Unexpected error:",n),{success:!1,error:"Unexpected error occurred"}}},G=async(s,r)=>{var n;const{data:o,error:e}=await u.from("user_group_weekly_presets").select("sessions").eq("user_id",s).eq("weekly_frequency",r).limit(1);return e?(console.error("[GroupSessionsAPI] Error loading UGWP presets:",e),[]):o&&((n=o[0])==null?void 0:n.sessions)||[]},P=async(s,r,o)=>{const{error:e}=await u.from("user_group_weekly_presets").upsert({user_id:s,weekly_frequency:r,sessions:o},{onConflict:"user_id,weekly_frequency"});return e?(console.error("[GroupSessionsAPI] Error saving UGWP presets:",e),!1):!0},q=async s=>{try{console.log("[GroupAssignmentAPI] Fetching available group slots...");const{data:r,error:o}=await u.rpc("get_available_group_slots",{p_day_of_week:s||null});if(o)throw console.error("[GroupAssignmentAPI] Error fetching group slots:",o),o;return console.log("[GroupAssignmentAPI] Fetched group slots:",r),r.map(e=>({id:e.template_id,groupType:e.group_type,dayOfWeek:e.day_of_week,startTime:e.start_time,endTime:e.end_time,trainer:e.trainer,room:e.room,groupIdentifier:e.group_identifier,maxCapacity:e.max_capacity,currentAssignments:e.current_assignments,availableSpots:e.available_spots,isFull:e.is_full}))}catch(r){throw console.error("[GroupAssignmentAPI] Failed to fetch available group slots:",r),r}},k=async(s,r,o,e,n,t,a)=>{try{console.log("[GroupAssignmentAPI] Validating group assignment...",{userId:s,programId:r,groupIdentifier:o,dayOfWeek:e,startTime:n,endTime:t,targetWeeklyFrequency:a});const{data:c,error:p}=await u.rpc("validate_group_assignment",{p_user_id:s,p_program_id:r,p_group_identifier:o,p_day_of_week:e,p_start_time:n,p_end_time:t,p_target_weekly_frequency:a});if(p)throw console.error("[GroupAssignmentAPI] Error validating assignment:",p),p;return console.log("[GroupAssignmentAPI] Validation result:",c[0]),{isValid:c[0].is_valid,errorMessage:c[0].error_message,errorType:c[0].error_type}}catch(c){throw console.error("[GroupAssignmentAPI] Failed to validate group assignment:",c),c}},I=async(s,r,o,e,n)=>{try{console.log("[GroupAssignmentAPI] Creating group assignment...",{programId:s,userId:r,groupIdentifier:o,weeklyFrequency:e,notes:n});const{data:t,error:a}=await u.rpc("create_group_assignment",{p_program_id:s,p_user_id:r,p_group_identifier:o,p_weekly_frequency:e,p_notes:n||null});if(a)throw console.error("[GroupAssignmentAPI] Error creating assignment:",a),a;return console.log("[GroupAssignmentAPI] Assignment creation result:",t[0]),{success:t[0].success,assignmentId:t[0].assignment_id,message:t[0].message}}catch(t){throw console.error("[GroupAssignmentAPI] Failed to create group assignment:",t),t}},v=async(s,r)=>{try{console.log("[GroupAssignmentAPI] Fetching user group assignments...",{userId:s,programId:r});let o=u.from("group_assignments").select(`
        id,
        program_id,
        user_id,
        group_type,
        day_of_week,
        start_time,
        end_time,
        trainer,
        room,
        group_identifier,
        weekly_frequency,
        assignment_date,
        is_active,
        created_by,
        created_at,
        updated_at,
        notes
      `).eq("user_id",s).eq("is_active",!0).order("day_of_week",{ascending:!0}).order("start_time",{ascending:!0});r&&(o=o.eq("program_id",r));const{data:e,error:n}=await o;if(n)throw console.error("[GroupAssignmentAPI] Error fetching user assignments:",n),n;return console.log("[GroupAssignmentAPI] Fetched user assignments:",e),e.map(t=>({id:t.id,programId:t.program_id,userId:t.user_id,groupType:t.group_type,dayOfWeek:t.day_of_week,startTime:t.start_time,endTime:t.end_time,trainer:t.trainer,room:t.room,groupIdentifier:t.group_identifier,weeklyFrequency:t.weekly_frequency,assignmentDate:t.assignment_date,isActive:t.is_active,createdBy:t.created_by,createdAt:t.created_at,updatedAt:t.updated_at,notes:t.notes}))}catch(o){throw console.error("[GroupAssignmentAPI] Failed to fetch user group assignments:",o),o}},S=async s=>{try{console.log("[GroupAssignmentAPI] Fetching group slot assignments...",{groupIdentifier:s});const{data:r,error:o}=await u.from("group_assignments").select(`
        id,
        program_id,
        user_id,
        group_type,
        day_of_week,
        start_time,
        end_time,
        trainer,
        room,
        group_identifier,
        weekly_frequency,
        assignment_date,
        is_active,
        created_by,
        created_at,
        updated_at,
        notes,
        user_profiles!group_assignments_user_id_fkey (
          first_name,
          last_name,
          email
        )
      `).eq("group_identifier",s).eq("is_active",!0).order("created_at",{ascending:!0});if(o)throw console.error("[GroupAssignmentAPI] Error fetching group slot assignments:",o),o;return console.log("[GroupAssignmentAPI] Fetched group slot assignments:",r),r.map(e=>({id:e.id,programId:e.program_id,userId:e.user_id,groupType:e.group_type,dayOfWeek:e.day_of_week,startTime:e.start_time,endTime:e.end_time,trainer:e.trainer,room:e.room,groupIdentifier:e.group_identifier,weeklyFrequency:e.weekly_frequency,assignmentDate:e.assignment_date,isActive:e.is_active,createdBy:e.created_by,createdAt:e.created_at,updatedAt:e.updated_at,notes:e.notes,userInfo:e.user_profiles}))}catch(r){throw console.error("[GroupAssignmentAPI] Failed to fetch group slot assignments:",r),r}},E=async s=>{try{console.log("[GroupAssignmentAPI] Removing group assignment...",{assignmentId:s});const{error:r}=await u.from("group_assignments").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",s);if(r)throw console.error("[GroupAssignmentAPI] Error removing assignment:",r),r;return console.log("[GroupAssignmentAPI] Assignment removed successfully"),!0}catch(r){throw console.error("[GroupAssignmentAPI] Failed to remove group assignment:",r),r}},b=async(s,r)=>{try{console.log("[GroupAssignmentAPI] Fetching user weekly assignments...",{userId:s,programId:r});const{data:o,error:e}=await u.from("user_weekly_assignments").select("*").eq("user_id",s).eq("program_id",r).order("week_start_date",{ascending:!1});if(e)throw console.error("[GroupAssignmentAPI] Error fetching weekly assignments:",e),e;return console.log("[GroupAssignmentAPI] Fetched weekly assignments:",o),o.map(n=>({id:n.id,userId:n.user_id,programId:n.program_id,targetWeeklyFrequency:n.target_weekly_frequency,currentAssignmentsCount:n.current_assignments_count,weekStartDate:n.week_start_date,isComplete:n.is_complete,createdAt:n.created_at,updatedAt:n.updated_at}))}catch(o){throw console.error("[GroupAssignmentAPI] Failed to fetch user weekly assignments:",o),o}},F=s=>["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"][s]||"Άγνωστη",C=s=>s.substring(0,5),U=s=>`${s} άτομα`,x=async(s,r,o,e,n,t)=>{try{console.log("[GroupAssignmentAPI] Checking room capacity...",{date:s,startTime:r,endTime:o,room:e,groupType:n,excludeUserId:t});let a=u.from("group_assignments").select("id, user_id, group_type").eq("assignment_date",s).eq("start_time",r).eq("end_time",o).eq("room",e).eq("group_type",n).eq("is_active",!0);t&&(a=a.neq("user_id",t));const{data:c,error:p}=await a;if(p)throw console.error("[GroupAssignmentAPI] Error checking assignments:",p),p;const{data:d,error:i}=await u.from("group_sessions").select("id, user_id, group_type").eq("session_date",s).eq("start_time",r).eq("end_time",o).eq("room",e).eq("group_type",n).eq("is_active",!0);if(i)throw console.error("[GroupAssignmentAPI] Error checking sessions:",i),i;const _=(c==null?void 0:c.length)||0,m=(d==null?void 0:d.length)||0,g=_+m,l=n,A=g<l;return console.log("[GroupAssignmentAPI] Room capacity check result (SAME GROUP TYPE ONLY):",{groupType:n,assignmentsCount:_,sessionsCount:m,currentOccupancy:g,maxCapacity:l,isAvailable:A,excludedUser:t}),{isAvailable:A,currentOccupancy:g,maxCapacity:l}}catch(a){throw console.error("[GroupAssignmentAPI] Failed to check room capacity:",a),a}},O=async(s,r,o)=>{try{console.log("[GroupAssignmentAPI] Sending program notification to user:",{userId:s,programId:r});const{data:e,error:n}=await u.from("user_profiles").select("first_name, last_name, email").eq("user_id",s).single();if(n)return console.error("[GroupAssignmentAPI] Error fetching user profile:",n),!1;const{data:t,error:a}=await u.from("personal_training_schedules").select("group_room_size, weekly_frequency, status").eq("id",r).single();if(a)return console.error("[GroupAssignmentAPI] Error fetching program info:",a),!1;const{error:c}=await u.from("personal_training_schedules").update({status:"accepted",accepted_at:new Date().toISOString()}).eq("id",r);return c?(console.error("[GroupAssignmentAPI] Error updating program status:",c),!1):(console.log("[GroupAssignmentAPI] Program notification sent successfully"),console.log("[GroupAssignmentAPI] User will see their program as accepted with group assignments"),!0)}catch(e){return console.error("[GroupAssignmentAPI] Failed to send program notification:",e),!1}};export{v as a,b,F as c,U as d,I as e,C as f,q as g,S as h,w as i,h as j,G as k,x as l,P as m,E as r,O as s,k as v};
