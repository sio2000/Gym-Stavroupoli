import{s as N}from"./index-ZmRz_kF8.js";const Z=async(y,h)=>{try{console.log("[GroupTrainingCalendarAPI] Fetching individual personal training sessions...",{startDate:y,endDate:h});const{data:a,error:T}=await N.from("personal_training_schedules").select("id, user_id, training_type, user_type, status").eq("status","accepted");if(console.log("[GroupTrainingCalendarAPI] All accepted schedules:",a),T)return console.error("[GroupTrainingCalendarAPI] Error fetching all schedules:",T),[];const f=a==null?void 0:a.filter(p=>p.training_type==="individual"&&p.user_type==="personal");if(console.log("[GroupTrainingCalendarAPI] Filtered individual personal schedules:",f),f&&f.length>0){const p=f.map(i=>i.id),{data:o,error:C}=await N.from("personal_training_schedules").select(`
          id,
          user_id,
          schedule_data,
          training_type,
          user_type
        `).in("id",p);if(C)return console.error("[GroupTrainingCalendarAPI] Error fetching individual schedules:",C),[];if(console.log("[GroupTrainingCalendarAPI] Found individual schedules:",(o==null?void 0:o.length)||0),console.log("[GroupTrainingCalendarAPI] Individual schedules data:",o),!o||o.length===0)return console.log("[GroupTrainingCalendarAPI] No individual schedules found"),[];const $=[...new Set(o.map(i=>i.user_id))];console.log("[GroupTrainingCalendarAPI] Fetching user profiles for IDs:",$);const{data:d,error:_}=await N.from("user_profiles").select("user_id, first_name, last_name, email").in("user_id",$);if(_)return console.error("[GroupTrainingCalendarAPI] Error fetching user profiles:",_),[];console.log("[GroupTrainingCalendarAPI] Found user profiles:",(d==null?void 0:d.length)||0);const v=new Map;d==null||d.forEach(i=>{v.set(i.user_id,i)});const k=[];return o==null||o.forEach(i=>{if(console.log("[GroupTrainingCalendarAPI] Processing schedule:",i.id,"for user:",i.user_id),console.log("[GroupTrainingCalendarAPI] Schedule data:",i.schedule_data),!i.schedule_data){console.log("[GroupTrainingCalendarAPI] No schedule_data for schedule:",i.id);return}const l=i.schedule_data;let I;if(Array.isArray(l))I=l;else if(l&&typeof l=="object"&&l.sessions)I=l.sessions;else{console.log("[GroupTrainingCalendarAPI] Schedule data is not in expected format for schedule:",i.id,l);return}if(!Array.isArray(I)){console.log("[GroupTrainingCalendarAPI] Sessions is not an array for schedule:",i.id);return}const r=v.get(i.user_id);I.forEach(e=>{const n=e.date;if(n>=y&&n<=h){const c=`${n}T${e.startTime}:00`,[t,P]=e.startTime.split(":").map(Number),b=`${((t+1)%24).toString().padStart(2,"0")}:${P.toString().padStart(2,"0")}`,m=`${n}T${b}:00`;k.push({id:`individual-${i.id}-${e.date}-${e.startTime}`,title:`Personal Training - ${(r==null?void 0:r.first_name)||"Unknown"} ${(r==null?void 0:r.last_name)||"User"}`,type:"group",start:c,end:m,room:e.room||"Personal Training Room",capacity:1,participants_count:1,participants:[{id:i.user_id,name:`${(r==null?void 0:r.first_name)||"Unknown"} ${(r==null?void 0:r.last_name)||"User"}`,email:(r==null?void 0:r.email)||"",avatar_url:void 0}],status:"scheduled",trainer:e.trainer||"Personal Trainer",group_type:1,notes:e.notes||""})}})}),console.log("[GroupTrainingCalendarAPI] Found individual personal training sessions:",k.length),k}else return console.log("[GroupTrainingCalendarAPI] No individual personal schedules found"),[]}catch(a){return console.error("[GroupTrainingCalendarAPI] Error fetching individual personal training sessions:",a),[]}},ir=async(y,h)=>{try{console.log("[GroupTrainingCalendarAPI] Fetching calendar events...",{startDate:y,endDate:h});const{data:a,error:T}=await N.from("group_sessions").select(`
        id,
        session_date,
        start_time,
        end_time,
        trainer,
        room,
        group_type,
        notes,
        is_active,
        created_at,
        program_id,
        user_profiles!group_sessions_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        ),
        personal_training_schedules!group_sessions_program_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("is_active",!0).gte("session_date",y).lte("session_date",h).order("session_date",{ascending:!0}).order("start_time",{ascending:!0});if(T)throw console.error("[GroupTrainingCalendarAPI] Error fetching sessions:",T),new Error(`Failed to fetch group sessions: ${T.message}`);console.log("[GroupTrainingCalendarAPI] Raw sessions data:",a);const{data:f,error:p}=await N.from("lesson_bookings").select(`
        id,
        session_id,
        booking_date,
        booking_time,
        trainer_name,
        room,
        status,
        user_id,
        schedule_id,
        user_profiles!lesson_bookings_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        ),
        personal_training_schedules!lesson_bookings_schedule_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).neq("status","cancelled").gte("booking_date",y).lte("booking_date",h).order("booking_date",{ascending:!0}).order("booking_time",{ascending:!0});p&&console.error("[GroupTrainingCalendarAPI] Error fetching Individual/Paspartu bookings:",p),console.log("[GroupTrainingCalendarAPI] Individual/Paspartu bookings:",f);const o=(a==null?void 0:a.map(r=>r.id))||[],{data:C,error:$}=await N.from("lesson_bookings").select(`
        id,
        session_id,
        status,
        user_id,
        trainer_name,
        room,
        user_profiles!lesson_bookings_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          avatar_url
        )
      `).in("session_id",o).in("status",["booked","confirmed"]);$&&console.error("[GroupTrainingCalendarAPI] Error fetching bookings:",$);const d=new Map;C==null||C.forEach(r=>{d.has(r.session_id)||d.set(r.session_id,[]),d.get(r.session_id).push(r)});const _=new Map,v=new Map,k=new Map;a==null||a.forEach(r=>k.set(r.id,r)),f==null||f.forEach(r=>{var b,m,w,F;const e=r.session_id?k.get(r.session_id):null,n=(b=r.personal_training_schedules)==null?void 0:b.training_type,c=(m=r.personal_training_schedules)==null?void 0:m.user_type,t=n==="individual",P=n==="group"&&c==="paspartu"||!!e&&((w=e.personal_training_schedules)==null?void 0:w.user_type)==="paspartu",A=n==="combination"||!!e&&((F=e.personal_training_schedules)==null?void 0:F.training_type)==="combination";if(t||P||A){const S=(e==null?void 0:e.trainer)||r.trainer_name,x=(e==null?void 0:e.room)||r.room,D=(r.booking_time||"").substring(0,5),G=`${r.booking_date}-${D}-${S}-${x}`;if(_.has(G)||_.set(G,[]),_.get(G).push(r),P){const q=`${r.booking_date}-${D}-${x}`;v.has(q)||v.set(q,[]),v.get(q).push(r)}}});const i=new Map;a==null||a.forEach((r,e)=>{var g,z,E,O,R,L,Y,j,Q,J,X;console.log(`[GroupTrainingCalendarAPI] Processing session ${e+1}:`,{id:r.id,date:r.session_date,time:`${r.start_time}-${r.end_time}`,trainer:r.trainer,room:r.room,group_type:r.group_type,user:(g=r.user_profiles)==null?void 0:g.first_name,training_type:(z=r.personal_training_schedules)==null?void 0:z.training_type,user_type:(E=r.personal_training_schedules)==null?void 0:E.user_type});const n=((O=r.personal_training_schedules)==null?void 0:O.training_type)==="group"&&((R=r.personal_training_schedules)==null?void 0:R.user_type)==="paspartu",c=((L=r.personal_training_schedules)==null?void 0:L.training_type)==="combination",t=c&&r.group_type===null,P=d.get(r.id)||[],A=n&&!!r.user_profiles,b=P.length>0||A;if(n&&!b&&!t){console.log(`[GroupTrainingCalendarAPI] Skipping Group/Paspartu session ${r.id} - no bookings`);return}c&&console.log(`[GroupTrainingCalendarAPI] Processing Combination session ${r.id} - always displayed`,{group_type:r.group_type,isIndividual:t,user:(Y=r.user_profiles)==null?void 0:Y.first_name}),t&&console.log(`[GroupTrainingCalendarAPI] Processing Individual session in Combination ${r.id}`,{group_type:r.group_type,user:(j=r.user_profiles)==null?void 0:j.first_name}),t&&console.log(`[GroupTrainingCalendarAPI] FORCING Individual Combination session ${r.id} to be processed`,{group_type:r.group_type,user:(Q=r.user_profiles)==null?void 0:Q.first_name,willCreateEvent:!0});const m=r.session_date,w=(r.start_time||"").substring(0,5),F=r.end_time,S=d.get(r.id)||[],x=`${m}-${w}-${r.room}-${r.trainer}`,D=`${m}-${w}-`,G=Array.from(_.keys()).find(s=>s.startsWith(D)&&s.endsWith(`-${r.room}`)),q=G?_.get(G)||[]:[],M=((J=S.find(s=>!!s.trainer_name))==null?void 0:J.trainer_name)||((X=q.find(s=>!!s.trainer_name))==null?void 0:X.trainer_name)||r.trainer,U=r.room,B=c?`${m}-${w}-${F}-${M}-${U}-${t?"individual":"combination"}-${t?"1":r.group_type||"1"}`:`${m}-${w}-${F}-${M}-${U}-${r.group_type}`;if(console.log(`[GroupTrainingCalendarAPI] Event key: ${B}`,{isGroupPaspartu:n,isCombination:c,hasBookings:b,group_type:r.group_type,willProcess:!n||b}),t&&console.log(`[GroupTrainingCalendarAPI] INDIVIDUAL COMBINATION SESSION DETECTED: ${r.id}`,{eventKey:B,group_type:r.group_type,trainer:M,room:U,date:m,startTime:w,endTime:F,willCreateEvent:!0}),!i.has(B)){let s;t?s=1:s=r.group_type||3;const H=`${m}T${w}:00`,V=`${m}T${F}:00`,K={id:`group-${B}`,title:t?`Ατομική Σεσία - ${M}`:`Group Training - ${M}`,type:"group",start:H,end:V,room:U,capacity:s,participants_count:0,participants:[],status:r.is_active?"scheduled":"cancelled",trainer:M,group_type:t?1:r.group_type,notes:r.notes};i.set(B,K),t&&console.log(`[GroupTrainingCalendarAPI] CREATED EVENT for Individual Combination session: ${r.id}`,{eventKey:B,title:K.title,capacity:K.capacity,start:K.start,end:K.end,trainer:K.trainer,group_type:K.group_type})}const u=i.get(B);r.user_profiles&&(u.participants.find(H=>H.id===r.user_profiles.user_id)||u.participants.push({id:r.user_profiles.user_id,name:`${r.user_profiles.first_name} ${r.user_profiles.last_name}`,email:r.user_profiles.email,avatar_url:r.user_profiles.avatar_url})),t&&console.log(`[GroupTrainingCalendarAPI] Individual Combination session ${r.id} processed successfully`,{eventKey:B,capacity:u.capacity,participants:u.participants.length,willBeDisplayed:!0,title:u.title,start:u.start,end:u.end}),u.participants_count=u.participants.length,P.forEach(s=>{s.user_profiles&&(u.participants.find(V=>V.id===s.user_profiles.user_id)||u.participants.push({id:s.user_profiles.user_id,name:`${s.user_profiles.first_name} ${s.user_profiles.last_name}`,email:s.user_profiles.email,avatar_url:s.user_profiles.avatar_url}))}),q.length>0&&q.forEach(s=>{s.user_profiles&&(u.participants.find(V=>V.id===s.user_profiles.user_id)||u.participants.push({id:s.user_profiles.user_id,name:`${s.user_profiles.first_name} ${s.user_profiles.last_name}`,email:s.user_profiles.email,avatar_url:s.user_profiles.avatar_url}))}),t&&console.log(`[GroupTrainingCalendarAPI] FINAL CHECK: Individual Combination session ${r.id} will be displayed`,{eventKey:B,capacity:u.capacity,participants:u.participants.length,status:u.status,title:u.title,start:u.start,end:u.end,trainer:u.trainer,room:u.room}),u.participants_count=u.participants.length}),_.forEach((r,e)=>{var W,M,U,B,u;console.log(`[GroupTrainingCalendarAPI] Processing Individual/Paspartu bookings for key: ${e}`,{bookingsCount:r.length,firstBooking:r[0]});const n=r[0],c=n.booking_date,t=n.booking_time,P=n.booking_time;let A=n.trainer_name;const b=n.room,m=((W=n.personal_training_schedules)==null?void 0:W.training_type)==="individual",w=((M=n.personal_training_schedules)==null?void 0:M.training_type)==="group"&&((U=n.personal_training_schedules)==null?void 0:U.user_type)==="paspartu",F=((B=n.personal_training_schedules)==null?void 0:B.training_type)==="combination";let S,x,D,G;if(m)S=1,x=1,D=`Individual Training - ${A}`,G=`${c}-${t}-${P}-${A}-${b}-individual`;else if(w||F){let g=3;const z=a==null?void 0:a.find(E=>{var O,R,L;return E.session_date===c&&E.start_time===t&&E.trainer===A&&E.room===b&&(((O=E.personal_training_schedules)==null?void 0:O.training_type)==="group"&&((R=E.personal_training_schedules)==null?void 0:R.user_type)==="paspartu"||((L=E.personal_training_schedules)==null?void 0:L.training_type)==="combination")});z?(g=z.group_type||3,console.log(`[GroupTrainingCalendarAPI] Found corresponding session for booking, using capacity: ${g}`),A||(A=z.trainer)):(g=((u=n.personal_training_schedules)==null?void 0:u.group_room_size)||3,console.log(`[GroupTrainingCalendarAPI] No corresponding session found, using group_room_size: ${g}`)),S=g,x=S,D=F?`Ατομική Σεσία - ${A}`:`Group Training - ${A}`,G=`${c}-${t}-${P}-${A}-${b}-${F?"individual":"group-paspartu"}-${x}`}else return;if(console.log(`[GroupTrainingCalendarAPI] Individual/Paspartu event key: ${G}`,{isIndividual:m,isGroupPaspartu:w,capacity:S,groupType:x}),!i.has(G)){const g=`${c}T${t}:00`,z=`${c}T${P}:00`,E={id:`booking-${G}`,title:D,type:"group",start:g,end:z,room:b,capacity:S,participants_count:0,participants:[],status:"scheduled",trainer:A,group_type:x,notes:`${m?"Individual":F?"Combination":"Group/Paspartu"} session - ${r.length} booking(s)`};i.set(G,E)}const q=i.get(G);r.forEach(g=>{g.user_profiles&&(q.participants.find(E=>E.id===g.user_profiles.user_id)||q.participants.push({id:g.user_profiles.user_id,name:`${g.user_profiles.first_name} ${g.user_profiles.last_name}`,email:g.user_profiles.email,avatar_url:g.user_profiles.avatar_url}))})}),i.forEach(r=>{r.participants_count=r.participants.length});const l=Array.from(i.values());console.log("[GroupTrainingCalendarAPI] Processed events:",l.length),console.log("[GroupTrainingCalendarAPI] Fetching individual personal training sessions...");const I=await Z(y,h);return l.push(...I),l.sort((r,e)=>{const n=r.start.split("T")[1].replace(/:\d{2}$/,""),c=e.start.split("T")[1].replace(/:\d{2}$/,"");if(n!==c)return n.localeCompare(c);const t=new Date(r.start).getTime(),P=new Date(e.start).getTime();return isNaN(t)||isNaN(P)?0:t-P}),console.log("[GroupTrainingCalendarAPI] Total events including individual sessions (sorted):",l.length),{events:l,total_count:l.length}}catch(a){throw console.error("[GroupTrainingCalendarAPI] Unexpected error:",a),new Error("Failed to fetch group training calendar events")}},rr=async(y,h,a,T,f,p)=>{var o;try{console.log("[GroupTrainingCalendarAPI] Checking session capacity...",{sessionDate:y,startTime:h,endTime:a,trainer:T,room:f,groupType:p});let C=N.from("group_sessions").select(`
        id,
        group_type,
        personal_training_schedules!group_sessions_program_id_fkey(
          group_room_size
        )
      `).eq("session_date",y).eq("start_time",h).eq("end_time",a).eq("trainer",T).eq("room",f).eq("is_active",!0);p&&(C=C.eq("group_type",p));const{data:$,error:d}=await C;if(d)return console.error("[GroupTrainingCalendarAPI] Error checking capacity:",d),{isFull:!1,currentCount:0,capacity:0,error:d.message};if(!$||$.length===0)return{isFull:!1,currentCount:0,capacity:6};const _=((o=$[0].personal_training_schedules)==null?void 0:o.group_room_size)||6,v=$.map(n=>n.id),{data:k,error:i}=await N.from("lesson_bookings").select("id").in("session_id",v).eq("status","booked");if(i)return console.error("[GroupTrainingCalendarAPI] Error checking bookings:",i),{isFull:!1,currentCount:0,capacity:_,error:i.message};const l=$.length,I=(k==null?void 0:k.length)||0,r=l+I,e=r>=_;return console.log("[GroupTrainingCalendarAPI] Detailed capacity check (SAME GROUP TYPE ONLY):",{groupType:p,sessions:$.length,directUsers:l,bookings:I,total:r,capacity:_,isFull:e}),console.log("[GroupTrainingCalendarAPI] Capacity check result:",{currentCount:r,capacity:_,isFull:e}),{isFull:e,currentCount:r,capacity:_}}catch(C){return console.error("[GroupTrainingCalendarAPI] Error checking capacity:",C),{isFull:!1,currentCount:0,capacity:0,error:"Failed to check capacity"}}},nr=async(y,h,a,T,f,p)=>{try{const o=await rr(y,h,a,T,f,p);return o.error?{canCreate:!1,error:o.error}:o.isFull?{canCreate:!1,error:`Session is at full capacity (${o.currentCount}/${o.capacity}). Cannot create new session.`,currentCount:o.currentCount,capacity:o.capacity}:{canCreate:!0}}catch(o){return console.error("[GroupTrainingCalendarAPI] Error validating session creation:",o),{canCreate:!1,error:"Failed to validate session creation"}}},ar=async(y,h,a,T,f,p)=>{var o,C,$,d,_;try{console.log("[GroupTrainingCalendarAPI] Validating Individual/Paspartu booking...",{sessionDate:y,startTime:h,trainer:a,room:T,userId:f,scheduleId:p});const{data:v,error:k}=await N.from("lesson_bookings").select(`
        id,
        user_id,
        schedule_id,
        personal_training_schedules!lesson_bookings_schedule_id_fkey(
          training_type,
          user_type,
          group_room_size
        )
      `).eq("booking_date",y).eq("booking_time",h).eq("trainer_name",a).eq("room",T).eq("status","booked");if(k)return console.error("[GroupTrainingCalendarAPI] Error checking existing Individual/Paspartu bookings:",k),{canBook:!1,error:"Failed to check existing bookings"};const i=(v==null?void 0:v.filter(e=>{var n,c,t;return((n=e.personal_training_schedules)==null?void 0:n.training_type)==="individual"||((c=e.personal_training_schedules)==null?void 0:c.user_type)==="paspartu"||((t=e.personal_training_schedules)==null?void 0:t.training_type)==="combination"}))||[];let l=1;if(i.length>0){const e=i[0],n=((o=e.personal_training_schedules)==null?void 0:o.training_type)==="individual",c=((C=e.personal_training_schedules)==null?void 0:C.training_type)==="group"&&(($=e.personal_training_schedules)==null?void 0:$.user_type)==="paspartu",t=((d=e.personal_training_schedules)==null?void 0:d.training_type)==="combination";n?l=1:(c||t)&&(l=((_=e.personal_training_schedules)==null?void 0:_.group_room_size)||3)}else if(p){const{data:e,error:n}=await N.from("personal_training_schedules").select("training_type, user_type, group_room_size").eq("id",p).single();!n&&e&&(e.training_type==="individual"?l=1:(e.training_type==="group"&&e.user_type==="paspartu"||e.training_type==="combination")&&(l=e.group_room_size||3))}const I=i.length,r=I>=l;return console.log("[GroupTrainingCalendarAPI] Individual/Paspartu capacity check:",{currentCount:I,capacity:l,isFull:r,existingBookings:i.length,scheduleId:p}),r?{canBook:!1,error:"This session is already full. Please choose another available time slot.",currentCount:I,capacity:l}:{canBook:!0,currentCount:I,capacity:l}}catch(v){return console.error("[GroupTrainingCalendarAPI] Error validating Individual/Paspartu booking:",v),{canBook:!1,error:"Failed to validate Individual/Paspartu booking"}}};export{rr as checkSessionCapacity,ir as getGroupTrainingCalendarEvents,ar as validateIndividualPaspartuBooking,nr as validateSessionCreation};
