import{s,z as _}from"./index-ZmRz_kF8.js";const y=async()=>{try{console.log("[MembershipAPI] ===== FETCHING MEMBERSHIP PACKAGES =====");const{data:e,error:r}=await s.from("membership_packages").select("*").eq("is_active",!0).order("name");if(console.log("[MembershipAPI] Query result - data:",e,"error:",r),r)throw r;return console.log("[MembershipAPI] Returning packages:",e||[]),e||[]}catch(e){return console.error("[MembershipAPI] ===== ERROR FETCHING MEMBERSHIP PACKAGES ====="),console.error("Error fetching membership packages:",e),_.error("Σφάλμα κατά τη φόρτωση των πακέτων συνδρομής"),[]}},M=async e=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e))return console.error("Invalid package ID format:",e),[];const{data:t,error:a}=await s.from("membership_package_durations").select("*").eq("package_id",e).eq("is_active",!0).order("duration_days");if(a)throw a;return t||[]}catch(r){return console.error("Error fetching package durations:",r),_.error("Σφάλμα κατά τη φόρτωση των επιλογών διάρκειας"),[]}},E=async(e,r,t,a=!1)=>{try{const{data:{user:l}}=await s.auth.getUser();if(!l)throw new Error("User not authenticated");const o={user_id:l.id,package_id:e,duration_type:r,requested_price:t,status:"pending"};a&&(o.has_installments=!0,o.installment_1_amount=0,o.installment_2_amount=0,o.installment_3_amount=0,o.installment_1_payment_method="cash",o.installment_2_payment_method="cash",o.installment_3_payment_method="cash");const{error:i}=await s.from("membership_requests").insert(o);if(i)throw i;return!0}catch(l){return console.error("Error creating membership request:",l),_.error("Σφάλμα κατά τη δημιουργία του αιτήματος"),!1}},I=async()=>{try{const{data:e,error:r}=await s.from("membership_requests").select(`
        *,
        user:user_profiles!membership_requests_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          profile_photo
        ),
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).not("package.name","eq","Ultimate").order("created_at",{ascending:!1});if(r)throw r;return console.log("[MembershipAPI] Processing requests with locked installments..."),await Promise.all((e||[]).map(async a=>{try{if(a.installment_1_locked!==void 0||a.installment_2_locked!==void 0||a.installment_3_locked!==void 0)return console.log(`[MembershipAPI] Request ${a.id} - Using new fields`),{...a,installment_1_locked:a.installment_1_locked||!1,installment_2_locked:a.installment_2_locked||!1,installment_3_locked:a.installment_3_locked||!1,third_installment_deleted:a.third_installment_deleted||!1,third_installment_deleted_at:a.third_installment_deleted_at,third_installment_deleted_by:a.third_installment_deleted_by};console.log(`[MembershipAPI] Request ${a.id} - Using old system (fields not found)`);const{data:o,error:i}=await s.rpc("get_locked_installments_for_request",{request_id:a.id});if(i)return console.error("Error loading locked installments for request:",a.id,i),a;const c=o||[],{data:u,error:d}=await s.rpc("is_third_installment_deleted",{request_id:a.id});let p=!1,h,f;if(!d&&u&&(p=u,u)){const{data:n,error:m}=await s.rpc("get_deleted_third_installment_info",{request_id:a.id});!m&&n&&n.length>0&&(h=n[0].deleted_at,f=n[0].deleted_by_name)}return{...a,locked_installments:c,installment_1_locked:c.some(n=>n.installment_number===1),installment_2_locked:c.some(n=>n.installment_number===2),installment_3_locked:c.some(n=>n.installment_number===3),third_installment_deleted:p,third_installment_deleted_at:h,third_installment_deleted_by:f}}catch(l){return console.error("Error processing locked installments for request:",a.id,l),a}}))}catch(e){return console.error("Error fetching membership requests with locked installments:",e),_.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},A=async e=>{try{const{data:r,error:t}=await s.from("membership_requests").select(`
        *,
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).eq("user_id",e).not("package.name","eq","Ultimate").order("created_at",{ascending:!1});if(t)throw t;return r||[]}catch(r){return console.error("Error fetching user membership requests:",r),_.error("Σφάλμα κατά τη φόρτωση των αιτημάτων"),[]}},q=async e=>{try{const{data:{user:r}}=await s.auth.getUser();if(!r)throw new Error("User not authenticated");const{data:t,error:a}=await s.from("membership_requests").select("*").eq("id",e).single();if(a||!t)throw new Error("Request not found");const{data:l,error:o}=await s.from("membership_package_durations").select("*").eq("package_id",t.package_id).eq("duration_type",t.duration_type).single();if(o||!l)throw new Error("Duration not found");const i=`${new Date().getFullYear()}-${String(new Date().getMonth()+1).padStart(2,"0")}-${String(new Date().getDate()).padStart(2,"0")}`,c=new Date;c.setDate(c.getDate()+l.duration_days);const u=`${c.getFullYear()}-${String(c.getMonth()+1).padStart(2,"0")}-${String(c.getDate()).padStart(2,"0")}`,{error:d}=await s.from("membership_requests").update({status:"approved",approved_by:r.id,approved_at:new Date().toISOString()}).eq("id",e);if(d)throw d;const{error:p}=await s.from("memberships").insert({user_id:t.user_id,package_id:t.package_id,start_date:i,end_date:u,is_active:!0,approved_by:r.id,approved_at:new Date().toISOString(),duration_type:t.duration_type});if(p)throw p;const h={pilates_trial:1,pilates_1month:4,pilates_2months:8,pilates_3months:16,pilates_6months:25,pilates_1year:50};let f=!1;try{const{data:n}=await s.from("membership_packages").select("name").eq("id",t.package_id).single();f=(n==null?void 0:n.name)==="Pilates"}catch{console.warn("[MembershipAPI] Could not verify package name for pilates deposit logic. Skipping deposit credit.")}if(f){let n=0;typeof t.classes_count=="number"&&t.classes_count>0&&(n=t.classes_count);try{const{data:m}=await s.from("membership_package_durations").select("classes_count, price, duration_days, duration_type").eq("package_id",t.package_id).eq("duration_type",t.duration_type).single();if(!n&&(m!=null&&m.classes_count)&&(n=m.classes_count),n||(n=h[(m==null?void 0:m.duration_type)||t.duration_type]||0),!n&&typeof(m==null?void 0:m.price)=="number"){const g=Math.round(m.price);n={0:1,44:4,80:8,144:16,190:25,350:50}[g]||0}}catch(m){console.warn("[MembershipAPI] Could not read duration row for pilates deposit mapping:",m)}if(n||(n=h[t.duration_type]||0),n>0){const m=new Date(u+"T23:59:59Z").toISOString(),{error:g}=await s.rpc("credit_pilates_deposit",{p_user_id:t.user_id,p_package_id:t.package_id,p_deposit_remaining:n,p_expires_at:m,p_created_by:r.id});g?console.error("[MembershipAPI] Error creating pilates deposit via RPC:",g):console.log(`[MembershipAPI] Pilates deposit credited via RPC: ${n} lessons for user ${t.user_id}`)}else console.warn("[MembershipAPI] Pilates deposit mapping resulted in 0 credits. Check configuration.")}return!0}catch(r){return console.error("Error approving membership request:",r),_.error("Σφάλμα κατά την έγκριση του αιτήματος"),!1}},U=async(e,r)=>{try{const{data:{user:t}}=await s.auth.getUser();if(!t)throw new Error("User not authenticated");const{error:a}=await s.from("membership_requests").update({status:"rejected",rejected_reason:r}).eq("id",e);if(a)throw a;return!0}catch(t){return console.error("Error rejecting membership request:",t),_.error("Σφάλμα κατά την απόρριψη του αιτήματος"),!1}},D=async e=>{try{console.log("[MembershipAPI] ===== FETCHING USER ACTIVE MEMBERSHIPS ====="),console.log("[MembershipAPI] User ID:",e);const r=new Date().toISOString().split("T")[0];console.log("[MembershipAPI] Current date for filtering:",r);const{data:t,error:a}=await s.from("memberships").select(`
        *,
        package:membership_packages(
          id,
          name,
          description,
          package_type
        )
      `).eq("user_id",e).eq("is_active",!0).gte("end_date",r).order("end_date",{ascending:!1});if(console.log("[MembershipAPI] Query result - data:",t,"error:",a),a)throw a;const o=(t||[]).filter(i=>{var p;const c=new Date(i.end_date),u=new Date;u.setHours(0,0,0,0);const d=c>=u;return d||console.log("[MembershipAPI] Filtering out expired membership:",{id:i.id,end_date:i.end_date,package_name:(p=i.package)==null?void 0:p.name}),d}).map(i=>({...i,status:i.status||"active",duration_type:i.duration_type||"month",approved_by:i.approved_by||null,approved_at:i.approved_at||i.created_at}));return console.log("[MembershipAPI] Returning active memberships (after filtering):",o),o}catch(r){return console.error("[MembershipAPI] ===== ERROR FETCHING USER ACTIVE MEMBERSHIPS ====="),console.error("Error fetching user memberships:",r),_.error("Σφάλμα κατά τη φόρτωση των συνδρομών"),[]}},v=async(e,r)=>{try{if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(r))return console.error("Invalid package ID format:",r),!1;const a=new Date().toISOString().split("T")[0];console.log("[MembershipAPI] Checking active membership for user:",e,"package:",r,"current date:",a);const{data:l,error:o}=await s.from("memberships").select("id, end_date").eq("user_id",e).eq("package_id",r).eq("is_active",!0).gte("end_date",a).limit(1);if(o)throw o;const i=l&&l.length>0;return console.log("[MembershipAPI] Has active membership result:",i,"data:",l),i}catch(t){return console.error("Error checking active membership:",t),!1}},b=e=>new Intl.NumberFormat("el-GR",{style:"currency",currency:"EUR"}).format(e),w=e=>({year:"Έτος",semester:"Εξάμηνο",month:"Μήνας",lesson:"Μάθημα",pilates_trial:"1 Μάθημα (Trial)",pilates_1month:"4 Μαθήματα (1 μήνας)",pilates_2months:"8 Μαθήματα (2 μήνες)",pilates_3months:"16 Μαθημάτων (3 μήνες)",pilates_6months:"25 Μαθημάτων (6 μήνες)",pilates_1year:"50 Μαθημάτων (1 έτος)",ultimate_1year:"1 Έτος Ultimate",ultimate_medium_1year:"1 Έτος Ultimate Medium"})[e]||e,S=(e,r)=>e==="lesson"&&r===7||e==="pilates_trial"&&r===7?"1 εβδομάδα":e==="3 Μήνες"&&r===90?"Τρίμηνο":r===1?"1 ημέρα":r===7?"1 εβδομάδα":r===30?"1 μήνας":r===90?"3 μήνες":r===180?"6 μήνες":r===365?"1 έτος":`${r} ημέρες`,R=async(e,r)=>{try{console.log("[MembershipAPI] ===== UPDATING PACKAGE DURATION ====="),console.log("[MembershipAPI] Duration ID:",e,"New Price:",r);const{error:t}=await s.from("membership_package_durations").update({price:r,updated_at:new Date().toISOString()}).eq("id",e);if(t)throw console.error("[MembershipAPI] Error updating duration:",t),t;return console.log("[MembershipAPI] Duration updated successfully"),!0}catch(t){return console.error("[MembershipAPI] ===== ERROR UPDATING DURATION ====="),console.error("Error updating package duration:",t),_.error("Σφάλμα κατά την ενημέρωση της τιμής"),!1}},$=async()=>{try{console.log("[MembershipAPI] Loading Pilates package durations from database");const{data:e,error:r}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(r||!e)throw console.error("Error finding Pilates package:",r),new Error("Pilates package not found");const{data:t,error:a}=await s.from("membership_package_durations").select("*").eq("package_id",e.id).eq("is_active",!0).order("price",{ascending:!0});if(a)throw console.error("Error loading Pilates durations:",a),a;return console.log("[MembershipAPI] Loaded Pilates durations:",t),t||[]}catch(e){return console.error("Error loading Pilates package durations:",e),_.error("Σφάλμα κατά τη φόρτωση των επιλογών Pilates"),[]}},C=async(e,r,t,a,l,o=!1)=>{var i;try{let c=l;if(c)console.log("[MembershipAPI] Using provided userId:",c);else{console.log("[MembershipAPI] Getting user from auth...");const{data:{user:m},error:g}=await s.auth.getUser();if(console.log("[MembershipAPI] Auth result:",{user:m,authError:g}),!m)throw new Error("User not authenticated");c=m.id}console.log("[MembershipAPI] Creating Pilates membership request:",{packageId:e,durationType:r,classesCount:t,requestedPrice:a,userId:c}),console.log("[MembershipAPI] Proceeding with user ID:",c),console.log("[MembershipAPI] Supabase client info:",{hasClient:!!s,hasAuth:!!((i=s)!=null&&i.auth)});let u=e;if(e==="Pilates"||e==="pilates-package"){const{data:m,error:g}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(g||!m)throw console.error("Error finding Pilates package:",g),new Error("Pilates package not found");u=m.id}const d={user_id:c,package_id:u,duration_type:r,requested_price:a,classes_count:t,status:"pending"};o&&(d.has_installments=!0,d.installment_1_amount=0,d.installment_2_amount=0,d.installment_3_amount=0,d.installment_1_payment_method="cash",d.installment_2_payment_method="cash",d.installment_3_payment_method="cash"),console.log("[MembershipAPI] Inserting membership request with data:",d),console.log("[MembershipAPI] Testing table access...");const{data:p,error:h}=await s.from("membership_requests").select("id").limit(1);console.log("[MembershipAPI] Test access result:",{testData:p,testError:h});const{data:f,error:n}=await s.from("membership_requests").insert(d).select().single();if(console.log("[MembershipAPI] Insert result:",{data:f,error:n}),n){if(console.error("[MembershipAPI] Insert error details:",n),n.message&&n.message.includes("Too Many Requests")){console.error("[MembershipAPI] Rate limit exceeded, retrying in 2 seconds..."),await new Promise(k=>setTimeout(k,2e3));const{data:m,error:g}=await s.from("membership_requests").insert(d).select().single();if(g)throw console.error("[MembershipAPI] Retry also failed:",g),g;return console.log("[MembershipAPI] Retry successful:",m),_.success(`Αίτημα Pilates δημιουργήθηκε: ${t} μαθήματα για ${b(a)}`),!0}throw n}return console.log("[MembershipAPI] Pilates request created successfully:",f),_.success(`Αίτημα Pilates δημιουργήθηκε: ${t} μαθήματα για ${b(a)}`),!0}catch(c){return console.error("Error creating Pilates membership request:",c),_.error("Σφάλμα κατά τη δημιουργία του αιτήματος Pilates"),!1}},O=async(e,r)=>{try{console.log(`[MembershipAPI] Updating Pilates pricing: ${e} = ${b(r)}`);const{data:t,error:a}=await s.from("membership_packages").select("id").eq("name","Pilates").eq("is_active",!0).single();if(a||!t)throw console.error("Error finding Pilates package:",a),new Error("Pilates package not found");const{error:l}=await s.from("membership_package_durations").update({price:r,updated_at:new Date().toISOString()}).eq("package_id",t.id).eq("duration_type",e);if(l)throw console.error("Error updating Pilates pricing:",l),l;return console.log(`[MembershipAPI] Pilates pricing updated successfully: ${e} = ${b(r)}`),_.success(`Η τιμή για ${w(e)} ενημερώθηκε σε ${b(r)}`),!0}catch(t){return console.error("Error updating Pilates pricing:",t),_.error("Σφάλμα κατά την ενημέρωση της τιμής Pilates"),!1}},F=async()=>{try{console.log("[MembershipAPI] Fetching Ultimate membership requests with separate locking...");const{data:e,error:r}=await s.from("membership_packages").select("id, name").in("name",["Ultimate","Ultimate Medium"]);if(r||!e||e.length===0)return console.log("[MembershipAPI] No Ultimate packages found or error:",r),[];const t=e.map(i=>i.id);console.log("[MembershipAPI] Found Ultimate package IDs:",t);const{data:a,error:l}=await s.from("membership_requests").select(`
        *,
        user:user_profiles!membership_requests_user_id_fkey(
          user_id,
          first_name,
          last_name,
          email,
          profile_photo
        ),
        package:membership_packages!membership_requests_package_id_fkey(
          id,
          name,
          description
        )
      `).in("package_id",t).order("created_at",{ascending:!1});if(l)throw console.error("[MembershipAPI] Error fetching Ultimate requests:",l),l;if(console.log("[MembershipAPI] Found Ultimate requests:",(a==null?void 0:a.length)||0),!a||a.length===0)return[];const o=a.map(i=>({...i,installment_1_locked:i.installment_1_locked||!1,installment_2_locked:i.installment_2_locked||!1,installment_3_locked:i.installment_3_locked||!1,third_installment_deleted:i.third_installment_deleted||!1,third_installment_deleted_at:i.third_installment_deleted_at,third_installment_deleted_by:i.third_installment_deleted_by}));return console.log("[MembershipAPI] Returning Ultimate requests with locks:",o.length),o}catch(e){return console.error("[MembershipAPI] Error fetching Ultimate membership requests:",e),[]}},N=async(e,r,t,a=!1,l)=>{try{let o=l;if(!o){const{data:{user:p},error:h}=await s.auth.getUser();if(!p)throw new Error("User not authenticated");o=p.id}console.log("[MembershipAPI] Creating Ultimate membership request:",{packageId:e,durationType:r,requestedPrice:t,hasInstallments:a,userId:o});let i=e;if(e==="Ultimate"||e==="ultimate-package"){const{data:p,error:h}=await s.from("membership_packages").select("id").eq("name","Ultimate").eq("is_active",!0).single();if(h||!p)throw console.error("Error finding Ultimate package:",h),new Error("Ultimate package not found");i=p.id}else if(e==="Ultimate Medium"||e==="ultimate-medium-package"){const{data:p,error:h}=await s.from("membership_packages").select("id").eq("name","Ultimate Medium").eq("is_active",!0).single();if(h||!p)throw console.error("Error finding Ultimate Medium package:",h),new Error("Ultimate Medium package not found");i=p.id}const c={user_id:o,package_id:i,duration_type:r,requested_price:t,has_installments:a,status:"pending"};a&&(c.installment_1_amount=0,c.installment_2_amount=0,c.installment_3_amount=0,c.installment_1_payment_method="cash",c.installment_2_payment_method="cash",c.installment_3_payment_method="cash");const{data:u,error:d}=await s.from("membership_requests").insert(c).select().single();if(d)throw console.error("[MembershipAPI] Insert error:",d),d;return console.log("[MembershipAPI] Ultimate request created successfully:",u),a?_.success("Αίτημα Ultimate δημιουργήθηκε με επιλογή δόσεων. Ο διαχειριστής θα καθορίσει τα ποσά."):_.success(`Αίτημα Ultimate δημιουργήθηκε: ${b(t)}`),!0}catch(o){return console.error("Error creating Ultimate membership request:",o),_.error("Σφάλμα κατά τη δημιουργία του αιτήματος Ultimate"),!1}},T=async()=>{try{const{data:e,error:r}=await s.from("membership_package_durations").select(`
        id,
        package_id,
        duration_type,
        duration_days,
        price,
        classes_count,
        is_active,
        created_at,
        updated_at,
        membership_packages!inner(
          id,
          name,
          package_type
        )
      `).in("membership_packages.name",["Ultimate","Ultimate Medium"]).eq("is_active",!0).order("price",{ascending:!0});if(r)throw console.error("Error fetching Ultimate package durations:",r),r;return e||[]}catch(e){return console.error("Error fetching Ultimate package durations:",e),[]}},G=async e=>{var r;try{console.log("[MembershipAPI] Approving Ultimate membership request with dual activation:",e);const{data:t,error:a}=await s.from("membership_requests").select(`
        *,
        user_profiles!membership_requests_user_id_fkey(user_id, first_name, last_name, email),
        membership_packages!membership_requests_package_id_fkey(id, name, package_type)
      `).eq("id",e).single();if(a||!t)throw console.error("[MembershipAPI] Error fetching request data:",a),a;if(!["Ultimate","Ultimate Medium"].includes((r=t.membership_packages)==null?void 0:r.name))throw new Error("This function is only for Ultimate package requests");const{error:l}=await s.from("membership_requests").update({status:"approved",updated_at:new Date().toISOString()}).eq("id",e);if(l)throw console.error("[MembershipAPI] Error updating request status:",l),l;const{data:o,error:i}=await s.rpc("create_ultimate_dual_memberships",{p_user_id:t.user_id,p_ultimate_request_id:e,p_duration_days:365,p_start_date:new Date().toISOString().split("T")[0]});if(i)throw console.error("[MembershipAPI] Error creating dual memberships:",i),await s.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),i;if(!o||!o.success)throw console.error("[MembershipAPI] Dual activation failed:",o),await s.from("membership_requests").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",e),new Error((o==null?void 0:o.error)||"Failed to create dual memberships");return console.log("[MembershipAPI] Ultimate dual activation successful:",{requestId:e,userId:t.user_id,pilatesMembershipId:o.pilates_membership_id,freeGymMembershipId:o.free_gym_membership_id,startDate:o.start_date,endDate:o.end_date}),!0}catch(t){return console.error("[MembershipAPI] Error approving Ultimate membership request:",t),_.error("Σφάλμα κατά την έγκριση του Ultimate αιτήματος"),!1}};export{q as approveMembershipRequest,G as approveUltimateMembershipRequest,v as checkUserHasActiveMembership,E as createMembershipRequest,C as createPilatesMembershipRequest,N as createUltimateMembershipRequest,b as formatPrice,S as getDurationDisplayText,w as getDurationLabel,M as getMembershipPackageDurations,y as getMembershipPackages,I as getMembershipRequestsWithLockedInstallments,$ as getPilatesPackageDurations,F as getUltimateMembershipRequests,T as getUltimatePackageDurations,D as getUserActiveMemberships,A as getUserMembershipRequests,U as rejectMembershipRequest,R as updateMembershipPackageDuration,O as updatePilatesPackagePricing};
